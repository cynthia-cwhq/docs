{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CWHQ Documentation \u00b6 Welcome to the CodeWizardsHQ documentation page! This documentation is a reference for most of the libraries and languages we use in CodeWizardsHQ courses. It is not meant to be an exhaustive reference, but rather a handy tool that covers the basics. You'll find links to further reading throughout if you want to explore a topic in more detail. Usage \u00b6 Use the navigation menu on the left-hand side of the page to browse the available documentation. Each documentation section will have a table of contents on the right-hand side for easy browsing of the major topics contained in the section. You can also use the Search bar if you have a specific topic in mind. Contributing \u00b6 If you spot a typo or have a suggestion, you can file an issue here and the project maintainers will reach out to you.","title":"Home"},{"location":"#cwhq-documentation","text":"Welcome to the CodeWizardsHQ documentation page! This documentation is a reference for most of the libraries and languages we use in CodeWizardsHQ courses. It is not meant to be an exhaustive reference, but rather a handy tool that covers the basics. You'll find links to further reading throughout if you want to explore a topic in more detail.","title":"CWHQ Documentation"},{"location":"#usage","text":"Use the navigation menu on the left-hand side of the page to browse the available documentation. Each documentation section will have a table of contents on the right-hand side for easy browsing of the major topics contained in the section. You can also use the Search bar if you have a specific topic in mind.","title":"Usage"},{"location":"#contributing","text":"If you spot a typo or have a suggestion, you can file an issue here and the project maintainers will reach out to you.","title":"Contributing"},{"location":"javascript/javascript-language/","text":"JavaScript Language \u00b6 JavaScript is the language that powers the interactive web! We use JavaScript as the primary language in these courses at CodeWizardsHQ: Elementary Middle School High School Intro to Real World Programming Interactive Web with JavaScript Fundamentals of Web Development Capstone I Minecraft Capstone I Virtual Reality Game User Interface Development Fundamental Programming Concepts User Interface Development APIs and Databases Web Development for Kids \u2013 2 Application Programming Interfaces Capstone II Online Multiplayer Gaming In this section of our documentation, you'll find references to most of the core JavaScript language features that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent JavaScript resources: MDN JavaScript Docs The Modern JavaScript Tutorial Eloquent JavaScript Comments \u00b6 Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program. Single Line Comments \u00b6 Single line comments are denoted by the // characters. You can put them above or to the right of the line of code they reference: // Validate the user is logged in and redirect them to the appropriate page. if ( isLoggedIn ( user )) { redirectToHomepage (); } else { redirectToLogin (); } var minHeight = 60 ; // This is measured in inches, not feet! Deactivating Code \u00b6 You can deactivate sections of code with comments: if ( age < 18 ) { // Turning this off for now // prompt_user(); redirectToKidZone (); } else { loginUser (); } Multiline Comments \u00b6 Multiline comments start with /* and end with */ /* This calculates the hypotenuse of a right triangle when given the sides of the right triangle. It's the Pythagorean Theorem. The ** is how you write exponents in JavaScript, and fractional exponents are like roots, so 0.5 is the square root. */ var hypotenuse = (( sideA ** 2 ) + ( sideB ** 2 )) ** 0.5 ; Many programmers perfer to put * on each line of a multiline comment and indent a bit for clarity: /* * This calculates the hypotenuse of a right triangle when given the sides * of the right triangle. It's the Pythagorean Theorem. The ** is how you * write exponents in JavaScript, and fractional exponents are like roots, * so 0.5 is the square root. */ var hypotenuse = (( sideA ** 2 ) + ( sideB ** 2 )) ** 0.5 ; Further reading \u00b6 MDN - JavaScript Basics: Comments Eloquent JavaScript - Comments The Modern JavaScript Tutorial - Comments Conditional Statements \u00b6 Conditional statements allow you to run a block of code when a boolean condition is true. if \u00b6 The if statement is the simplest form of conditional statement. If the expression to the right of the if keyword is true , the indented code block will execute: var isHungry = true ; if ( isHungry ) { console . log ( \"You should eat!\" ); } Example Output: You should eat! Usually, a conditional expression uses comparison operators to generate a boolean result: var age = 19 ; if ( age >= 18 ) { console . log ( \"You are legally an adult, congrats!\" ); } Example Output: You are legally an adult, congrats! else if \u00b6 The else if conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to true will run: var favoriteFood = \"Tacos\" ; if ( favoriteFood == \"Sushi\" ) { console . log ( \"We're going out for Japanese food to night!\" ); } else if ( favoriteFood == \"Pasta\" ) { console . log ( \"How about we eat some Italian food tonight?\" ); } else if ( favoriteFood == \"Tacos\" ) { console . log ( \"Time for some Mexican food!\" ); } else if ( favoriteFood == \"Samosa\" ) { console . log ( \"Let's eat Indian food tonight!\" ); } Example Output: Time for some Mexican food! else \u00b6 The else conditional statement runs when all other conditional statements in a group are false . You can think of it as the default option: var favoriteFood = \"Hot Dogs with Cream Cheese\" ; if ( favoriteFood == \"Sushi\" ) { console . log ( \"We're going out for Japanese food to night!\" ); } else if ( favoriteFood == \"Pasta\" ) { console . log ( \"How about we eat some Italian food tonight?\" ); } else if ( favoriteFood == \"Tacos\" ) { console . log ( \"Time for some Mexican food!\" ); } else if ( favoriteFood == \"Samosa\" ) { console . log ( \"Let's eat Indian food tonight!\" ); } else { console . log ( \"I don't know what that favorite food is!\" ); } I don't know what that favorite food is! Comparison Operators \u00b6 Here are the comparison operators that you can use in conditional expressions to generate a boolean value: Operator Description > Greater-than >= Greater-than or equal-to < Less-than <= Less-than or equal-to == Equal-to != Not equal-to Complex Conditional Statements \u00b6 Complex conditional statements involve combining more than one conditional expression with logical operators : var age = 15 ; var heightInFeet = 4.6 ; if ( age >= 13 && heightInFeet > 5 ) { console . log ( \"You may ride the roller coaster.\" ); } else { console . log ( \"You may NOT ride the roller coaster.\" ); } Example Output: You may NOT ride the roller coaster. You can string as many logical operators together as you want to build more complex conditional statements. Note that it's often easier to read and reason about if you surround each major section with parentheses, as in the example below: var isHungry = false ; var isThirsty = true ; var foodAmount = 10 ; var drinkAmount = 0 ; if (( isHungry && foodAmount > 0 ) || ( isThirsty && drinkAmount > 0 )) { enterKitchen (); } else { playVideoGames (); } Logical Operators \u00b6 Logical operators allow you to combine multiple conditional expressions in a single conditional statement: Operator Description && (and) true when both conditional expressions are true || (or) true when either conditional expression is true ! (not) Reverses the value of a conditional expression Using the && operator \u00b6 The && (and) operator evaluates to true when both conditional expressions are true : var age = 15 ; var heightInFeet = 5.2 ; if ( age >= 13 && heightInFeet > 5 ) { console . log ( \"You may ride the roller coaster.\" ); } else { console . log ( \"You may NOT ride the roller coaster.\" ); } Example Output: You may ride the roller coaster. Using the || operator \u00b6 The || (or) operator evaluates to true when either conditional expression is true : var isHungry = true ; var isThirsty = false ; if ( isHungry || isThirsty ) { console . log ( \"You should go to the kitchen.\" ); } else { console . log ( \"Do whatever, you're good!\" ); } Example Output: You should go to the kitchen. Using the ! operator \u00b6 The ! (not) operator reverses a conditional expression: var isTired = true ; if ( ! isTired ) { console . log ( \"Let's go outside and play.\" ); } else { console . log ( \"Let's take a nap.\" ); } Example Output: Let's take a nap. Nested Conditional Statements \u00b6 Conditional statements can be nested inside other conditional statements. Use indentation to make the nesting obvious at a glance: var role = \"admin\" ; if ( role == \"admin\" || role == \"developer\" ) { console . log ( \"You can see the secret stuff in this app.\" ); if ( role == \"admin\" ) { console . log ( \"You can also see the SUPER secret stuff in this app.\" ); } } Example Output: You can see the secret stuff in this app. You can also see the SUPER secret stuff in this app. Further reading \u00b6 MDN - JavaScript Building Blocks: Conditionals Eloquent JavaScript - Conditional Execution The Modern JavaScript Tutorial - Conditional Branching Data Types \u00b6 Every value has a data type in JavaScript. The data type determines what kinds of operations you can perform on the value. boolean \u00b6 The boolean data type represents a true or a false value: var isHungry = true ; var isThirsty = false ; Generating boolean values in a conditional statement \u00b6 You normally won't use a boolean directly, but instead will generate a boolean in a conditional statement: var age = 19 ; // This generates `true` if ( age >= 18 ) { console . log ( \"You are an adult!\" ); } // This generates `false` if ( age < 18 ) { console . log ( \"You are a child.\" ); } Truthy and falsy values \u00b6 Booleans are not the only values that can be True/False. Every value in JavaScript is either truthy or falsy , which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy , and all other strings and numbers are truthy . Here's an example of a falsy value: var username = \"\" ; if ( username ) { console . log ( `Hello, ${ username } !` ); } else { console . log ( \"The username is blank\" ); } Example Output: The username is blank Here's an example of a truthy value: var numBananas = 2 ; if ( numBananas ) { console . log ( \"We have bananas!\" ); } else { console . log ( \"We have no bananas!\" ); } Example Output: We have bananas! number \u00b6 The number data type represents any number: var totalCost = 29.99 ; var numBananas = 2 ; Converting string to number \u00b6 You can use the parseInt() function to convert a string to an integer number : var age = parseInt ( \"13\" ); console . log ( age ); // 13 This is often combined with the prompt() function when you prompt the user for a numeric data type: var age = parseInt ( prompt ( \"How old are you? \" )); The parseFloat() function works the same way, except the number will be a decimal number: var heightInInches = parseFloat ( \"60.5\" ); console . log ( heightInInches ); // 60.5 Instead of parseInt() or parseFloat() , you can use the + operator to convert a string to a number : var age = + ( \"13\" ); console . log ( age ); // 13 var heightInInches = + ( \"60.5\" ); console . log ( heightInInches ); // 60.5 string \u00b6 The string data type represents a text value: var name = \"Daniel\" ; String concatenation \u00b6 If you need to combine a variable and a string , you can use the + operator. This technique is called string concatenation : var name = \"Daniel\" ; var greeting = \"Hello, \" + name ; console . log ( greeting ); // Hello, Daniel String interpolation \u00b6 Another way to combine a variable and a string is using template-literal strings. This technique is called string interpolation , and it is the preferred way to combine variables and strings . Note that the string must be surrounded by backtick quotes, which are usually near the 1 key on your keyboard: var name = \"Daniel\" ; var age = 35 ; console . log ( `I'm ${ name } and I'm ${ age } years old.` ); Example Output: I'm Daniel and I'm 35 years old. Multiline strings \u00b6 Template literal strings allow you to write large blocks of text in a single console.log() statement: var menu = ` Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* ` ; console . log ( menu ); Example Output: Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* Getting the number of characters in a str \u00b6 You can use the string.length property to get the number of characters in a string : var name = \"Daniel\" ; name . length ; // 6 Checking if a string ends with a set of characters \u00b6 The string.endsWith() method lets you check if a string ends with a given pattern: var emailAddresses = [ \"djs@cwhq.com\" , \"alecg@auburn.edu\" , \"samh@bridges.com\" ]; for ( var emailAddress of emailAddresses ) { if ( emailAddress . endsWith ( \".edu\" )) { console . log ( ` ${ emailAddress } is a school address` ); } else if ( emailAddress . endsWith ( \"cwhq.com\" )) { console . log ( ` ${ emailAddress } is a CWHQ employee address` ); } else { console . log ( `I don't know what ${ emailAddress } is for` ); } } Example Output: djs@cwhq.com is a CWHQ employee address alecg@auburn.edu is a school address I don't know what sam@bridges.com is for Sanitizing user input \u00b6 User's do strange things, but using string.toLowerCase() and string.trim() can help your program to validate string data types. string.toLowerCase() makes a string lowercase: // Imagine a user entered \"Pizza\" with an uppercase P var favoriteFood = \"Pizza\" ; if ( favoriteFood . toLowerCase () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! string.trim() removes leading or trailing whitespace from a string : // Imagine a user entered \" pizza\" with a leading space character var favoriteFood = \" pizza\" ; if ( favoriteFood . trim () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! You can chain these methods together to sanitize a string completely: // What a mess! Extra spaces before/after and odd capitalization var favoriteFood = \" PIzZa \" ; if ( favoriteFood . trim (). toLowerCase () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! Further reading \u00b6 MDN - JavaScript Data Types and Data Structures The Modern JavaScript Tutorial - Data Types Eloquent JavaScript - Values, Types, and Operators MDN - Truthy MDN - Falsy MDN - JavaScript Reference: Template Literals MDN - JavaScript Reference: String.prototype.trim() MDN - JavaScript Reference: String.prototype.toLowerCase() Data Structures \u00b6 Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house. array \u00b6 The array data structure is used to store data in ordered slots . It is known as mutable sequence type , which means it can be modified after creation. Usually, the items in a array are homogeneous, which means they represent a group of similar items of the same data type: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; var menuPrices = [ 4.50 , 5.75 , 3.00 ]; var ids = [ 184 , 294 , 832 , 98 , 4 ]; You can write an array on multiple lines if you want. The trailing comma is recommended but not required: var foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"ice cream\" , \"asparagus\" , ]; Accessing items in an array \u00b6 You can access individual items in an array using the [] characters and the index number of the item. The index numbers start at 0: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( names [ 0 ]); // alecg console . log ( names [ 1 ]); // danielj console . log ( names [ 2 ]); // dimas Adding an item to an array \u00b6 To add an item to an array after it has been created, you can use the array.push() method. The array.push() method adds the item to the end of the array : var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . push ( \"samh\" ); console . log ( names ); // ['alecg', 'danielj', 'dimas', 'samh']; Updating an item in an array \u00b6 To update an array item, replace the value at the index: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names [ 1 ] = \"django\" ; console . log ( names ); // ['alecg', 'django', 'dimas'] Removing an item from an array \u00b6 To remove an item from an array , you can use the array.splice() method. You tell array.splice the index number to start removing items from and the number of items to remove: array . splice ( indexToRemove , numItemsToRemove ); Here's an example that removes the first item from an array : var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . splice ( 0 , 1 ); console . log ( names ); // ['danielj', 'dimas'] If you want to remove an item from the end of an array , use the array.pop() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . pop (); console . log ( names ); // ['alecg', 'danielj']; Looping through an array \u00b6 To loop through the items in an array , use a for...of loop. Note the convention of using the plural names for the array and the singular name for the loop-iteration variable: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( \"This documentation is brought to you by:\" ); for ( var name of names ) { console . log ( name ); } Example Output: This documentation is brought to you by: alecg danielj dimas You can also loop through an array using a traditional for loop if you need to use the index number of each item for something: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( \"This documentation is brought to you by:\" ); for ( var i = 0 ; i < names . length ; i ++ ) { console . log ( names [ i ]); } Example Output: This documentation is brought to you by: alecg danielj dimas Getting the number of items in an array \u00b6 To get the number of items in an array , use the array.length() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; var numNames = names . length ; console . log ( numNames ); // 3 Checking if an item is contained in an array \u00b6 To check if an item is contained in an array , use the array.includes() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( names . includes ( \"alecg\" )); // True console . log ( names . includes ( \"samh\" )); // False Further reading \u00b6 MDN - The JavaScript Reference - Array Eloquent JavaScript - Data Structures: Objects and Arrays The Modern JavaScript Tutorial - Arrays MDN - The JavaScript Reference - Array.push() MDN - The JavaScript Reference - Array.pop() MDN - The JavaScript Reference - Array.splice() MDN - The JavaScript Reference - Array.includes() object \u00b6 The object data structure is used to store data in key/value pairs. var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; You can use strings for the keys as well, but we'll follow the above form in these docs: var staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , }; Accessing items in an object \u00b6 You have to know the key to access an individual item in an object : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var danielJob = staff . danielj ; console . log ( `Daniel is a ${ danielJob } .` ); // Daniel is a Curriculum Developer. var alecJob = staff . alecg ; console . log ( `Alec is a ${ alecJob } .` ); // Alec is a Curriculum Instructor. var dimaJob = staff . dimas .; console . log ( `Dima is a ${ dimaJob } .` ); // Dima is a Designer. Adding an item to an object \u00b6 You can add an item to an object by providing the key/value pair (it's the same syntax as updating an item): var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; staff . django = \"Director Of Pug Snorts\" ; console . log ( staff ); // {danielj: 'Curriculum Developer', alecg: 'Curriculum Instructor', dimas: 'Designer', django: 'Director Of Pug Snorts'} Updating an item in an object \u00b6 To update an item in an object , you must know the key: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; staff . danielj = \"Burrito Taste-Tester\" console . log ( staff ); // {danielj: 'Burrito Taste-Tester', alecg: 'Curriculum Instructor', dimas: 'Designer'} Removing an item from an object \u00b6 To remove an item from an object , use the delete operator: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; delete staff . danielj ; console . log ( staff ) // {alecg: 'Curriculum Instructor', dimas: 'Designer'} Looping through an object \u00b6 To loop through an object , you use the for...in loop like this: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; for ( var key in staff ) { // Note the [] used to access the value in the object console . log ( ` ${ key } is a ${ staff [ key ] } .` ); } Example Output: danielj is a Curriculum Developer. alecg is a Curriculum Instructor. dimas is a Designer. Getting the keys from an object \u00b6 If you need to get all of the keys from an object , use the object.keys() method. Note that the keys will be returned as an array : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var names = staff . keys (); console . log ( `Here are all the names in the staff object: ${ names } ` ); Example Output: Here are all the names in the staff object: ['danielj', 'alecg', 'dimas'] Getting the values from an object \u00b6 If you need to get all of the values from an object , use the object.values() method. Note, the values will be returned as an array : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var jobs = staff . values (); console . log ( `Here are all the jobs in the staff object: ${ jobs } ` ); Example Output: Here are all the jobs in the staff object: ['Curriculum Developer', 'Curriculum Instructor', 'Designer'] Getting the number of items in an object \u00b6 You can get the keys from an object and then use the array.length method to get the number of items in an object : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var numberOfStaff = staff . keys (). length ; console . log ( `We have ${ numberOfStaff } people on our staff.` ); // We have 3 people on our staff. Further reading \u00b6 MDN - The JavaScript Reference - Object Eloquent JavaScript - Objects and Arrays The Modern JavaScript Tutorial - Objects MDN - The JavaScript Reference - for...in MDN - The JavaScript Reference - Object.values() MDN - The JavaScript Reference - Object.keys() MDN - The JavaScript Reference - delete operator Functions \u00b6 Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y. (Don't Repeat Yourself) principle because they reduce unnecessary repetition. Built-in functions \u00b6 JavaScript comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below. parseFloat() \u00b6 The parseFloat() function converts data to a number data type with a decimal point: var pi = parseFloat ( \"3.14\" ); console . log ( pi ); // 3.14 typeof pi ; // 'number var two = parseFloat ( 2 ); console . log ( two ); // 2.0 typeof two ; // 'number' prompt() \u00b6 The prompt() function allows you to prompt a user. The user's response is returned as a string , which you can store in a variable: var name = prompt ( \"What is your name? \" ); console . log ( `Nice to meet you, ${ name } !` ); Example Output: What is your name? Daniel Nice to meet you, Daniel! parseInt() \u00b6 The parseInt() function converts data to a number data type without a decimal point: var intPI = parseInt ( 3.14 ); console . log ( intPI ); // 3 typeof intPI ; // 'number' var meaningOfLife = parseInt ( \"42\" ); console . log ( meaningOfLife ); // 42 typeof meaningOfLife ; // 'number' console.log() \u00b6 The console.log() function displays text in the developer console: console . log ( \"Hello, world!\" ); // Hello, world! Using special characters with console.log() \u00b6 You can use special characters such as \\n and \\t to format the text a bit. The \\n adds a newline (like hitting enter on your keyboard) and the \\t adds a tab: console . log ( \"Line 1\\nLine 2\\nLine 3\\n\" ); console . log ( \"\\tThis is tabbed over\\n\\tThis too.\" ); Example Output: Line 1 Line 2 Line 3 This is tabbed over This too. Further reading \u00b6 MDN - Web APIs: console.log() MDN - The JavaScript Reference: parseInt() MDN - The JavaScript Reference: parseFloat() MDN - The JavaScript Reference: window.prompt() User-defined functions \u00b6 You define a function using the function keyword. Functions definitions can go anywhere in your file, but it helps to keep them all organized in a single area for readability: function sayHello () { console . log ( \"Hello!\" ); } Calling a function \u00b6 Defining a function does not run the statements in the body of the function. To run a function, you call it like this: function sayHello () { console . log ( \"Hello!\" ); } sayHello (); // Hello! Adding parameters to a function \u00b6 When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); } Passing arguments to a function \u00b6 If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); } sayHello ( \"Daniel\" ); // Hello, Daniel! Returning a value from a function \u00b6 You can return a value from a function by using the return keyword: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } Capturing a function's return value \u00b6 If a function returns a value, you can capture it in a varible: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } var total = add ( 2 , 3 ); console . log ( total ); // 5 You can also use the value immediately in another function, like console.log() or as part of a template-literal string: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } console . log ( add ( 2 , 3 )) // 5 console . log ( `2 + 3 = ${ add ( 2 , 3 ) } ` ); // 2 + 3 = 5 Indentation in functions \u00b6 Indentation is not required in JavaScript, but you should do it for readability. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you should also indent the body of that statement: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); if ( name == \"Daniel\" ) { console . log ( \"That's a cool name!\" ); } else { console . log ( \"Nice to meet you!\" ); } } sayHello ( \"Daniel\" ); sayHello ( \"Alec\" ); Example Output: Hello, Daniel! That's a cool name! Hello, Alec! Nice to meet you! Using an early return statement to exit a function \u00b6 A return statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body: function greetCodewizard ( name ) { var staff = [ \"danielj\" , \"alecg\" , \"dimas\" ]; if ( ! staff . includes ( name )) { console . log ( \"I don't know you!\" ); return ; } console . log ( `Hello, ${ name } !` ); } greetCodewizard ( \"danielj\" ); // Hello, danielj! greetCodewizard ( \"django\" ); // I don't know you! Further reading \u00b6 MDN - JavaScript Building Blocks: Functions EloquentJavaScript - Functions The Modern JavaScript Tutorial - Functions Loops \u00b6 If you need to repeat something in your programs, you'll need to use one of JavaScript's looping mechanisms. for \u00b6 JavaScript's for loop is one of the more complicated pieces of syntax in the langauge. The header of the for loop controls how many times the loop runs, and it consists of three parts: // header for ( counter ; loopContinuationCondition ; incrementOrDecrement ) { // body } The counter is a variable that will hold a number representing the current loop iteration (usually). The loopContinuationCondition is a boolean condition that determines whether the loop should continue. The incrementOrDecrement is a statement that modifies the counter after each loop completes. To see all three elements in action, consider this for loop, which loops 3 times and prints \"Hello\" to the console three times: for ( var counter = 0 ; counter < 3 ; counter ++ ) { console . log ( \"Hello\" ); } Example Output: Hello Hello Hello Generally, the counter is called i . This is a shorthand that many programmers use, and you'll see it in many courses at CWHQ. The name of the variable is completely up to the programmer: for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( \"Hello\" ); } Example Output: Hello Hello Hello Counter-controlled repetition with the for loop \u00b6 A for loop is used to loop a certain number of times (called counter-controlled repetition). You generally perform some action in the body of a for loop: for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( ` ${ i } taco` ); } Example Output: 0 taco 1 taco 2 taco You can use a for loop to loop over an array , but the for...of loop is easier: var fruits = [ \"apple\" , \"banana\" , \"cherry\" ]; for ( var i = 0 ; i < fruits . length ; i ++ ) { console . log ( `Index number: ${ i } Fruit: ${ fruits [ i ] } ` ); } Example Output: Index number: 0 Fruit: apple Index number: 1 Fruit: banana Index number: 2 Fruit: cherry Looping through arrays with the for...of loop \u00b6 The for...of loop is the easiest way to loop through the items in an array . Note the convention of a plural array name (fruits) and a singular loop-iteration variable (fruit): var fruits = [ \"apple\" , \"banana\" , \"cherry\" ]; for ( var fruit of fruits ) { console . log ( fruit ); } Example Output: apple banana cherry Searching for a value in a for...of loop \u00b6 You can use a conditional statement inside a for...of loop to search for a particular item in an array and then do something: var fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ]; for ( var fruit of fruits ) { if ( fruit == \"orange\" ) { console . log ( ` ${ fruit } is the best fruit` ); } } Example Output: orange is the best fruit Finding a value in a for...of loop to use after the loop finishes \u00b6 You can store an item from the for...of loop for later use by creating a variable before the for...of loop with some default value. var fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ]; var bestFruit ; for ( var fruit of fruits ) { if ( fruit == \"orange\" ) { bestFruit = fruit ; } } // The best fruit is orange. console . log ( `The best fruit is ${ bestFruit } .` ) Creating a new array in a for...of loop \u00b6 Often, you'll want to loop through an array and build a new array from the contents of the original array . This technique is called mapping, and it's a common thing to do with arrays and for...of loops: var prices = [ 10 , 12 , 5 , 8 ]; var discounted_prices = []; for ( var price of prices ) { discounted_price = price - ( price * .10 ); discounted_prices . push ( discounted_price ); } // Here are your discounted prices: [9, 10.8, 4.5, 7.2] console . log ( `Here are your discounted prices: ${ discounted_prices } ` ) Looping through objects with the for...in loop \u00b6 The for...in loop is the easiest way to loop through the items in an object . The prop variable name is a convention, it represents each key (property) of the object : var users = { danielj : \"Admin\" , django : \"Support Staff\" , samh : \"Platform Developer\" , }; for ( var prop in users ) { console . log ( `Username: ${ prop } Role: ${ users [ prop ] } ` ); } Example Output: Username: danielj Role: Admin Username: django Role: Support Staff Username: samh Role: Platform Developer Further reading \u00b6 MDN - JavaScript Reference - for MDN - JavaScript Reference - for...of MDN - JavaScript Reference - for...in Eloquent JavaScript - for loops The Modern JavaScript Tutorial - The \"for\" loop while \u00b6 A while loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop). For example, you can use a while loop to ask a user something until they answer correctly: var keepLooping = true ; // This variable controls whether we loop or not. while ( keepLooping ) { var userGuess = prompt ( \"What is the meaning of life? \" ); if ( userGuess == \"42\" ) { console . log ( \"That's correct!\" ); keepLooping = false ; // Stops the loop. } else { console . log ( \"That's incorrect! Please try again.\" ); } } Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct! Using break to exit a loop \u00b6 You can also use a break statement instead of using a variable to control how many times an indefinite while loop runs: while ( true ) { userGuess = prompt ( \"What is the meaning of life? \" ); if ( userGuess == \"42\" ) { console . log ( \"That's correct!\" ); break ; // Stops the loop. } else { console . log ( \"That's incorrect! Please try again.\" ); } } Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct! Counter-controlled repetition \u00b6 You can use a while loop to perform counter-controlled repetition as well, but the for loop is generally preferred for this: var counter = 0 ; while ( counter < 5 ) { console . log ( counter ); counter ++ ; // If you forget this, you'll have an infinite loop! } Example Output: 0 1 2 3 4 Further reading \u00b6 MDN - JavaScript Rerference: while Eloquent JavaScript - while and do loops The Modern JavaScript Tutorial - The \"while\" loop Math Operations \u00b6 JavaScript can perform most mathematical operations with ease. There are standard operators for all of the arithmetic operations and the Math object has access to many more operations for things like Trigonometry. Arithmetic Operators \u00b6 The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator: var total = 8 + 2 ; var difference = 8 - 2 ; var product = 8 * 2 ; var quotient = 8 / 2 ; console . log ( `8 + 2 = ${ total } ` ) // 8 + 2 = 10 console . log ( `8 - 2 = ${ difference } ` ) // 8 - 2 = 6 console . log ( `8 * 2 = ${ product } ` ) // 8 * 2 = 16 console . log ( `8 / 2 = ${ quotient } ` ) // 8 / 2 = 4 Other Operators \u00b6 There are a few other common operators that JavaScript provides for common math operations. Modulo \u00b6 The modulo operator ( % ) returns the remainder after division: 10 % 3 // 1 Power \u00b6 The power operator ( ** ) multiplies a number by itself a given number of times: 3 ** 2 // 9 Further reading \u00b6 MDN - The JavaScript Guide: Arithmetic Operators Eloquent JavaScript - Arithmetic The Modern JavaScript Tutorial - Basic operators, maths The Math object \u00b6 JavaScript's Math object can be used to gain access to certain constants (such as PI), to perform trig calculations, or to get random numbers, among other things. Getting random numbers with Math.random() \u00b6 The Math.random() method returns a random decimal number between 0 and 1: var randomNumber = Math . random (); console . log ( randomNumber ); // 0.1524438866958424 If you'd like to get a random whole number between a min and max , this helper function is useful: function random ( min , max ) { var num = Math . floor ( Math . random () * ( max - min + 1 )) + min ; return num ; } var randomNumber = random ( 1 , 10 ); console . log ( randomNumber ); // 9 Rounding with Math.floor() and Math.ceil() \u00b6 To round a number down, use Math.floor() : var roundedNumber = Math . floor ( 4.6 ); console . log ( roundedNumber ); // 4 To round a number up, use Math.ceil() : var roundedNumber = Math . ceil ( 4.2 ); console . log ( roundedNumber ); // 4 Further reading \u00b6 MDN - The JavaScript Reference: Math MDN - The JavaScript Reference: Math Variables \u00b6 Variables assign a name to a value. The naming convention in JavaScript is to use camelCase for variable names. Creating a variable \u00b6 You create a variable using the var keyword: var myVariable ; Usually, you create a variable and assign a value to the variable the assignment operator ( = ) at once: var myName = \"Daniel\" ; var myAge = 35 ; Updating a numeric variable \u00b6 You can update the value stored in a numeric variable like this: var score = 0 ; score = score + 1 ; // 0 + 1 console . log ( score ); // 1 score = score + 1 ; // 1 + 1 console . log ( score ); // 2 The same works for decreasing the value of a numeric variable: var score = 3 ; score = score - 1 ; // 3 - 1 console . log ( score ); // 2 score = score - 1 ; // 2 - 1 console . log ( score ); // 1 There is a shorthand notation for increasing and decreasing the value of a numeric variable: var score = 0 ; score += 1 ; // 0 + 1 console . log ( score ); // 1 score += 1 ; // 1 + 1 console . log ( score ); // 2 score -= 1 ; // 2 - 1 console . log ( score ); // 1 score -= 1 ; // 1 - 1 console . log ( score ); // 0 For an even more compact notation, you can use ++ or -- to increase/decrease the value of a numeric variable: var score = 0 ; score ++ ; // 0 + 1 console . log ( score ); // 1 score ++ ; // 1 + 1 console . log ( score ); // 2 score -- ; // 2 - 1 console . log ( score ); // 1 score -- ; // 1 - 1 console . log ( score ); // 0 Global vs. local variables \u00b6 Any variable created outside of function definition is considered a global variable: // This is a global variable. var score = 0 ; function updateScore () { score = score + 1 ; // 1 } console . log ( score ); // 0 updateScore (); // Changes the global `score` variable console . log ( score ); // 1 Updates to global variables affect the variable throughout the program. If you want a variable to exist only inside of a function, you can make it local to the function by creating the variable (with the var keyword) inside the function: // This is a global variable. var score = 0 ; function updateScore () { // This is a local variable, it only exists within `updateScore()` var score = 1 ; } console . log ( score ); // 0 updateScore (); // Doesn't change the global `score` variable console . log ( score ); // 0 Further reading \u00b6 MDN - JavaScript First Steps - Variables Eloquent JavaScript - Bindings The Modern JavaScript Tutorial - Variables","title":"JavaScript Language"},{"location":"javascript/javascript-language/#javascript-language","text":"JavaScript is the language that powers the interactive web! We use JavaScript as the primary language in these courses at CodeWizardsHQ: Elementary Middle School High School Intro to Real World Programming Interactive Web with JavaScript Fundamentals of Web Development Capstone I Minecraft Capstone I Virtual Reality Game User Interface Development Fundamental Programming Concepts User Interface Development APIs and Databases Web Development for Kids \u2013 2 Application Programming Interfaces Capstone II Online Multiplayer Gaming In this section of our documentation, you'll find references to most of the core JavaScript language features that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent JavaScript resources: MDN JavaScript Docs The Modern JavaScript Tutorial Eloquent JavaScript","title":"JavaScript Language"},{"location":"javascript/javascript-language/#comments","text":"Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program.","title":"Comments"},{"location":"javascript/javascript-language/#single-line-comments","text":"Single line comments are denoted by the // characters. You can put them above or to the right of the line of code they reference: // Validate the user is logged in and redirect them to the appropriate page. if ( isLoggedIn ( user )) { redirectToHomepage (); } else { redirectToLogin (); } var minHeight = 60 ; // This is measured in inches, not feet!","title":"Single Line Comments"},{"location":"javascript/javascript-language/#deactivating-code","text":"You can deactivate sections of code with comments: if ( age < 18 ) { // Turning this off for now // prompt_user(); redirectToKidZone (); } else { loginUser (); }","title":"Deactivating Code"},{"location":"javascript/javascript-language/#multiline-comments","text":"Multiline comments start with /* and end with */ /* This calculates the hypotenuse of a right triangle when given the sides of the right triangle. It's the Pythagorean Theorem. The ** is how you write exponents in JavaScript, and fractional exponents are like roots, so 0.5 is the square root. */ var hypotenuse = (( sideA ** 2 ) + ( sideB ** 2 )) ** 0.5 ; Many programmers perfer to put * on each line of a multiline comment and indent a bit for clarity: /* * This calculates the hypotenuse of a right triangle when given the sides * of the right triangle. It's the Pythagorean Theorem. The ** is how you * write exponents in JavaScript, and fractional exponents are like roots, * so 0.5 is the square root. */ var hypotenuse = (( sideA ** 2 ) + ( sideB ** 2 )) ** 0.5 ;","title":"Multiline Comments"},{"location":"javascript/javascript-language/#further-reading","text":"MDN - JavaScript Basics: Comments Eloquent JavaScript - Comments The Modern JavaScript Tutorial - Comments","title":"Further reading"},{"location":"javascript/javascript-language/#conditional-statements","text":"Conditional statements allow you to run a block of code when a boolean condition is true.","title":"Conditional Statements"},{"location":"javascript/javascript-language/#if","text":"The if statement is the simplest form of conditional statement. If the expression to the right of the if keyword is true , the indented code block will execute: var isHungry = true ; if ( isHungry ) { console . log ( \"You should eat!\" ); } Example Output: You should eat! Usually, a conditional expression uses comparison operators to generate a boolean result: var age = 19 ; if ( age >= 18 ) { console . log ( \"You are legally an adult, congrats!\" ); } Example Output: You are legally an adult, congrats!","title":"if"},{"location":"javascript/javascript-language/#else-if","text":"The else if conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to true will run: var favoriteFood = \"Tacos\" ; if ( favoriteFood == \"Sushi\" ) { console . log ( \"We're going out for Japanese food to night!\" ); } else if ( favoriteFood == \"Pasta\" ) { console . log ( \"How about we eat some Italian food tonight?\" ); } else if ( favoriteFood == \"Tacos\" ) { console . log ( \"Time for some Mexican food!\" ); } else if ( favoriteFood == \"Samosa\" ) { console . log ( \"Let's eat Indian food tonight!\" ); } Example Output: Time for some Mexican food!","title":"else if"},{"location":"javascript/javascript-language/#else","text":"The else conditional statement runs when all other conditional statements in a group are false . You can think of it as the default option: var favoriteFood = \"Hot Dogs with Cream Cheese\" ; if ( favoriteFood == \"Sushi\" ) { console . log ( \"We're going out for Japanese food to night!\" ); } else if ( favoriteFood == \"Pasta\" ) { console . log ( \"How about we eat some Italian food tonight?\" ); } else if ( favoriteFood == \"Tacos\" ) { console . log ( \"Time for some Mexican food!\" ); } else if ( favoriteFood == \"Samosa\" ) { console . log ( \"Let's eat Indian food tonight!\" ); } else { console . log ( \"I don't know what that favorite food is!\" ); } I don't know what that favorite food is!","title":"else"},{"location":"javascript/javascript-language/#comparison-operators","text":"Here are the comparison operators that you can use in conditional expressions to generate a boolean value: Operator Description > Greater-than >= Greater-than or equal-to < Less-than <= Less-than or equal-to == Equal-to != Not equal-to","title":"Comparison Operators"},{"location":"javascript/javascript-language/#complex-conditional-statements","text":"Complex conditional statements involve combining more than one conditional expression with logical operators : var age = 15 ; var heightInFeet = 4.6 ; if ( age >= 13 && heightInFeet > 5 ) { console . log ( \"You may ride the roller coaster.\" ); } else { console . log ( \"You may NOT ride the roller coaster.\" ); } Example Output: You may NOT ride the roller coaster. You can string as many logical operators together as you want to build more complex conditional statements. Note that it's often easier to read and reason about if you surround each major section with parentheses, as in the example below: var isHungry = false ; var isThirsty = true ; var foodAmount = 10 ; var drinkAmount = 0 ; if (( isHungry && foodAmount > 0 ) || ( isThirsty && drinkAmount > 0 )) { enterKitchen (); } else { playVideoGames (); }","title":"Complex Conditional Statements"},{"location":"javascript/javascript-language/#logical-operators","text":"Logical operators allow you to combine multiple conditional expressions in a single conditional statement: Operator Description && (and) true when both conditional expressions are true || (or) true when either conditional expression is true ! (not) Reverses the value of a conditional expression","title":"Logical Operators"},{"location":"javascript/javascript-language/#using-the-operator","text":"The && (and) operator evaluates to true when both conditional expressions are true : var age = 15 ; var heightInFeet = 5.2 ; if ( age >= 13 && heightInFeet > 5 ) { console . log ( \"You may ride the roller coaster.\" ); } else { console . log ( \"You may NOT ride the roller coaster.\" ); } Example Output: You may ride the roller coaster.","title":"Using the &amp;&amp; operator"},{"location":"javascript/javascript-language/#using-the-operator_1","text":"The || (or) operator evaluates to true when either conditional expression is true : var isHungry = true ; var isThirsty = false ; if ( isHungry || isThirsty ) { console . log ( \"You should go to the kitchen.\" ); } else { console . log ( \"Do whatever, you're good!\" ); } Example Output: You should go to the kitchen.","title":"Using the || operator"},{"location":"javascript/javascript-language/#using-the-operator_2","text":"The ! (not) operator reverses a conditional expression: var isTired = true ; if ( ! isTired ) { console . log ( \"Let's go outside and play.\" ); } else { console . log ( \"Let's take a nap.\" ); } Example Output: Let's take a nap.","title":"Using the ! operator"},{"location":"javascript/javascript-language/#nested-conditional-statements","text":"Conditional statements can be nested inside other conditional statements. Use indentation to make the nesting obvious at a glance: var role = \"admin\" ; if ( role == \"admin\" || role == \"developer\" ) { console . log ( \"You can see the secret stuff in this app.\" ); if ( role == \"admin\" ) { console . log ( \"You can also see the SUPER secret stuff in this app.\" ); } } Example Output: You can see the secret stuff in this app. You can also see the SUPER secret stuff in this app.","title":"Nested Conditional Statements"},{"location":"javascript/javascript-language/#further-reading_1","text":"MDN - JavaScript Building Blocks: Conditionals Eloquent JavaScript - Conditional Execution The Modern JavaScript Tutorial - Conditional Branching","title":"Further reading"},{"location":"javascript/javascript-language/#data-types","text":"Every value has a data type in JavaScript. The data type determines what kinds of operations you can perform on the value.","title":"Data Types"},{"location":"javascript/javascript-language/#boolean","text":"The boolean data type represents a true or a false value: var isHungry = true ; var isThirsty = false ;","title":"boolean"},{"location":"javascript/javascript-language/#generating-boolean-values-in-a-conditional-statement","text":"You normally won't use a boolean directly, but instead will generate a boolean in a conditional statement: var age = 19 ; // This generates `true` if ( age >= 18 ) { console . log ( \"You are an adult!\" ); } // This generates `false` if ( age < 18 ) { console . log ( \"You are a child.\" ); }","title":"Generating boolean values in a conditional statement"},{"location":"javascript/javascript-language/#truthy-and-falsy-values","text":"Booleans are not the only values that can be True/False. Every value in JavaScript is either truthy or falsy , which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy , and all other strings and numbers are truthy . Here's an example of a falsy value: var username = \"\" ; if ( username ) { console . log ( `Hello, ${ username } !` ); } else { console . log ( \"The username is blank\" ); } Example Output: The username is blank Here's an example of a truthy value: var numBananas = 2 ; if ( numBananas ) { console . log ( \"We have bananas!\" ); } else { console . log ( \"We have no bananas!\" ); } Example Output: We have bananas!","title":"Truthy and falsy values"},{"location":"javascript/javascript-language/#number","text":"The number data type represents any number: var totalCost = 29.99 ; var numBananas = 2 ;","title":"number"},{"location":"javascript/javascript-language/#converting-string-to-number","text":"You can use the parseInt() function to convert a string to an integer number : var age = parseInt ( \"13\" ); console . log ( age ); // 13 This is often combined with the prompt() function when you prompt the user for a numeric data type: var age = parseInt ( prompt ( \"How old are you? \" )); The parseFloat() function works the same way, except the number will be a decimal number: var heightInInches = parseFloat ( \"60.5\" ); console . log ( heightInInches ); // 60.5 Instead of parseInt() or parseFloat() , you can use the + operator to convert a string to a number : var age = + ( \"13\" ); console . log ( age ); // 13 var heightInInches = + ( \"60.5\" ); console . log ( heightInInches ); // 60.5","title":"Converting string to number"},{"location":"javascript/javascript-language/#string","text":"The string data type represents a text value: var name = \"Daniel\" ;","title":"string"},{"location":"javascript/javascript-language/#string-concatenation","text":"If you need to combine a variable and a string , you can use the + operator. This technique is called string concatenation : var name = \"Daniel\" ; var greeting = \"Hello, \" + name ; console . log ( greeting ); // Hello, Daniel","title":"String concatenation"},{"location":"javascript/javascript-language/#string-interpolation","text":"Another way to combine a variable and a string is using template-literal strings. This technique is called string interpolation , and it is the preferred way to combine variables and strings . Note that the string must be surrounded by backtick quotes, which are usually near the 1 key on your keyboard: var name = \"Daniel\" ; var age = 35 ; console . log ( `I'm ${ name } and I'm ${ age } years old.` ); Example Output: I'm Daniel and I'm 35 years old.","title":"String interpolation"},{"location":"javascript/javascript-language/#multiline-strings","text":"Template literal strings allow you to write large blocks of text in a single console.log() statement: var menu = ` Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* ` ; console . log ( menu ); Example Output: Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now*","title":"Multiline strings"},{"location":"javascript/javascript-language/#getting-the-number-of-characters-in-a-str","text":"You can use the string.length property to get the number of characters in a string : var name = \"Daniel\" ; name . length ; // 6","title":"Getting the number of characters in a str"},{"location":"javascript/javascript-language/#checking-if-a-string-ends-with-a-set-of-characters","text":"The string.endsWith() method lets you check if a string ends with a given pattern: var emailAddresses = [ \"djs@cwhq.com\" , \"alecg@auburn.edu\" , \"samh@bridges.com\" ]; for ( var emailAddress of emailAddresses ) { if ( emailAddress . endsWith ( \".edu\" )) { console . log ( ` ${ emailAddress } is a school address` ); } else if ( emailAddress . endsWith ( \"cwhq.com\" )) { console . log ( ` ${ emailAddress } is a CWHQ employee address` ); } else { console . log ( `I don't know what ${ emailAddress } is for` ); } } Example Output: djs@cwhq.com is a CWHQ employee address alecg@auburn.edu is a school address I don't know what sam@bridges.com is for","title":"Checking if a string ends with a set of characters"},{"location":"javascript/javascript-language/#sanitizing-user-input","text":"User's do strange things, but using string.toLowerCase() and string.trim() can help your program to validate string data types. string.toLowerCase() makes a string lowercase: // Imagine a user entered \"Pizza\" with an uppercase P var favoriteFood = \"Pizza\" ; if ( favoriteFood . toLowerCase () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! string.trim() removes leading or trailing whitespace from a string : // Imagine a user entered \" pizza\" with a leading space character var favoriteFood = \" pizza\" ; if ( favoriteFood . trim () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food! You can chain these methods together to sanitize a string completely: // What a mess! Extra spaces before/after and odd capitalization var favoriteFood = \" PIzZa \" ; if ( favoriteFood . trim (). toLowerCase () == \"pizza\" ) { console . log ( \"That's my favorite food!\" ); } Example Output: That's my favorite food!","title":"Sanitizing user input"},{"location":"javascript/javascript-language/#further-reading_2","text":"MDN - JavaScript Data Types and Data Structures The Modern JavaScript Tutorial - Data Types Eloquent JavaScript - Values, Types, and Operators MDN - Truthy MDN - Falsy MDN - JavaScript Reference: Template Literals MDN - JavaScript Reference: String.prototype.trim() MDN - JavaScript Reference: String.prototype.toLowerCase()","title":"Further reading"},{"location":"javascript/javascript-language/#data-structures","text":"Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house.","title":"Data Structures"},{"location":"javascript/javascript-language/#array","text":"The array data structure is used to store data in ordered slots . It is known as mutable sequence type , which means it can be modified after creation. Usually, the items in a array are homogeneous, which means they represent a group of similar items of the same data type: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; var menuPrices = [ 4.50 , 5.75 , 3.00 ]; var ids = [ 184 , 294 , 832 , 98 , 4 ]; You can write an array on multiple lines if you want. The trailing comma is recommended but not required: var foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"ice cream\" , \"asparagus\" , ];","title":"array"},{"location":"javascript/javascript-language/#accessing-items-in-an-array","text":"You can access individual items in an array using the [] characters and the index number of the item. The index numbers start at 0: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( names [ 0 ]); // alecg console . log ( names [ 1 ]); // danielj console . log ( names [ 2 ]); // dimas","title":"Accessing items in an array"},{"location":"javascript/javascript-language/#adding-an-item-to-an-array","text":"To add an item to an array after it has been created, you can use the array.push() method. The array.push() method adds the item to the end of the array : var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . push ( \"samh\" ); console . log ( names ); // ['alecg', 'danielj', 'dimas', 'samh'];","title":"Adding an item to an array"},{"location":"javascript/javascript-language/#updating-an-item-in-an-array","text":"To update an array item, replace the value at the index: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names [ 1 ] = \"django\" ; console . log ( names ); // ['alecg', 'django', 'dimas']","title":"Updating an item in an array"},{"location":"javascript/javascript-language/#removing-an-item-from-an-array","text":"To remove an item from an array , you can use the array.splice() method. You tell array.splice the index number to start removing items from and the number of items to remove: array . splice ( indexToRemove , numItemsToRemove ); Here's an example that removes the first item from an array : var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . splice ( 0 , 1 ); console . log ( names ); // ['danielj', 'dimas'] If you want to remove an item from the end of an array , use the array.pop() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; names . pop (); console . log ( names ); // ['alecg', 'danielj'];","title":"Removing an item from an array"},{"location":"javascript/javascript-language/#looping-through-an-array","text":"To loop through the items in an array , use a for...of loop. Note the convention of using the plural names for the array and the singular name for the loop-iteration variable: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( \"This documentation is brought to you by:\" ); for ( var name of names ) { console . log ( name ); } Example Output: This documentation is brought to you by: alecg danielj dimas You can also loop through an array using a traditional for loop if you need to use the index number of each item for something: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( \"This documentation is brought to you by:\" ); for ( var i = 0 ; i < names . length ; i ++ ) { console . log ( names [ i ]); } Example Output: This documentation is brought to you by: alecg danielj dimas","title":"Looping through an array"},{"location":"javascript/javascript-language/#getting-the-number-of-items-in-an-array","text":"To get the number of items in an array , use the array.length() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; var numNames = names . length ; console . log ( numNames ); // 3","title":"Getting the number of items in an array"},{"location":"javascript/javascript-language/#checking-if-an-item-is-contained-in-an-array","text":"To check if an item is contained in an array , use the array.includes() method: var names = [ \"alecg\" , \"danielj\" , \"dimas\" ]; console . log ( names . includes ( \"alecg\" )); // True console . log ( names . includes ( \"samh\" )); // False","title":"Checking if an item is contained in an array"},{"location":"javascript/javascript-language/#further-reading_3","text":"MDN - The JavaScript Reference - Array Eloquent JavaScript - Data Structures: Objects and Arrays The Modern JavaScript Tutorial - Arrays MDN - The JavaScript Reference - Array.push() MDN - The JavaScript Reference - Array.pop() MDN - The JavaScript Reference - Array.splice() MDN - The JavaScript Reference - Array.includes()","title":"Further reading"},{"location":"javascript/javascript-language/#object","text":"The object data structure is used to store data in key/value pairs. var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; You can use strings for the keys as well, but we'll follow the above form in these docs: var staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , };","title":"object"},{"location":"javascript/javascript-language/#accessing-items-in-an-object","text":"You have to know the key to access an individual item in an object : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var danielJob = staff . danielj ; console . log ( `Daniel is a ${ danielJob } .` ); // Daniel is a Curriculum Developer. var alecJob = staff . alecg ; console . log ( `Alec is a ${ alecJob } .` ); // Alec is a Curriculum Instructor. var dimaJob = staff . dimas .; console . log ( `Dima is a ${ dimaJob } .` ); // Dima is a Designer.","title":"Accessing items in an object"},{"location":"javascript/javascript-language/#adding-an-item-to-an-object","text":"You can add an item to an object by providing the key/value pair (it's the same syntax as updating an item): var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; staff . django = \"Director Of Pug Snorts\" ; console . log ( staff ); // {danielj: 'Curriculum Developer', alecg: 'Curriculum Instructor', dimas: 'Designer', django: 'Director Of Pug Snorts'}","title":"Adding an item to an object"},{"location":"javascript/javascript-language/#updating-an-item-in-an-object","text":"To update an item in an object , you must know the key: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; staff . danielj = \"Burrito Taste-Tester\" console . log ( staff ); // {danielj: 'Burrito Taste-Tester', alecg: 'Curriculum Instructor', dimas: 'Designer'}","title":"Updating an item in an object"},{"location":"javascript/javascript-language/#removing-an-item-from-an-object","text":"To remove an item from an object , use the delete operator: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; delete staff . danielj ; console . log ( staff ) // {alecg: 'Curriculum Instructor', dimas: 'Designer'}","title":"Removing an item from an object"},{"location":"javascript/javascript-language/#looping-through-an-object","text":"To loop through an object , you use the for...in loop like this: var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; for ( var key in staff ) { // Note the [] used to access the value in the object console . log ( ` ${ key } is a ${ staff [ key ] } .` ); } Example Output: danielj is a Curriculum Developer. alecg is a Curriculum Instructor. dimas is a Designer.","title":"Looping through an object"},{"location":"javascript/javascript-language/#getting-the-keys-from-an-object","text":"If you need to get all of the keys from an object , use the object.keys() method. Note that the keys will be returned as an array : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var names = staff . keys (); console . log ( `Here are all the names in the staff object: ${ names } ` ); Example Output: Here are all the names in the staff object: ['danielj', 'alecg', 'dimas']","title":"Getting the keys from an object"},{"location":"javascript/javascript-language/#getting-the-values-from-an-object","text":"If you need to get all of the values from an object , use the object.values() method. Note, the values will be returned as an array : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var jobs = staff . values (); console . log ( `Here are all the jobs in the staff object: ${ jobs } ` ); Example Output: Here are all the jobs in the staff object: ['Curriculum Developer', 'Curriculum Instructor', 'Designer']","title":"Getting the values from an object"},{"location":"javascript/javascript-language/#getting-the-number-of-items-in-an-object","text":"You can get the keys from an object and then use the array.length method to get the number of items in an object : var staff = { danielj : \"Curriculum Developer\" , alecg : \"Curriculum Instructor\" , dimas : \"Designer\" , }; var numberOfStaff = staff . keys (). length ; console . log ( `We have ${ numberOfStaff } people on our staff.` ); // We have 3 people on our staff.","title":"Getting the number of items in an object"},{"location":"javascript/javascript-language/#further-reading_4","text":"MDN - The JavaScript Reference - Object Eloquent JavaScript - Objects and Arrays The Modern JavaScript Tutorial - Objects MDN - The JavaScript Reference - for...in MDN - The JavaScript Reference - Object.values() MDN - The JavaScript Reference - Object.keys() MDN - The JavaScript Reference - delete operator","title":"Further reading"},{"location":"javascript/javascript-language/#functions","text":"Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y. (Don't Repeat Yourself) principle because they reduce unnecessary repetition.","title":"Functions"},{"location":"javascript/javascript-language/#built-in-functions","text":"JavaScript comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below.","title":"Built-in functions"},{"location":"javascript/javascript-language/#parsefloat","text":"The parseFloat() function converts data to a number data type with a decimal point: var pi = parseFloat ( \"3.14\" ); console . log ( pi ); // 3.14 typeof pi ; // 'number var two = parseFloat ( 2 ); console . log ( two ); // 2.0 typeof two ; // 'number'","title":"parseFloat()"},{"location":"javascript/javascript-language/#prompt","text":"The prompt() function allows you to prompt a user. The user's response is returned as a string , which you can store in a variable: var name = prompt ( \"What is your name? \" ); console . log ( `Nice to meet you, ${ name } !` ); Example Output: What is your name? Daniel Nice to meet you, Daniel!","title":"prompt()"},{"location":"javascript/javascript-language/#parseint","text":"The parseInt() function converts data to a number data type without a decimal point: var intPI = parseInt ( 3.14 ); console . log ( intPI ); // 3 typeof intPI ; // 'number' var meaningOfLife = parseInt ( \"42\" ); console . log ( meaningOfLife ); // 42 typeof meaningOfLife ; // 'number'","title":"parseInt()"},{"location":"javascript/javascript-language/#consolelog","text":"The console.log() function displays text in the developer console: console . log ( \"Hello, world!\" ); // Hello, world!","title":"console.log()"},{"location":"javascript/javascript-language/#using-special-characters-with-consolelog","text":"You can use special characters such as \\n and \\t to format the text a bit. The \\n adds a newline (like hitting enter on your keyboard) and the \\t adds a tab: console . log ( \"Line 1\\nLine 2\\nLine 3\\n\" ); console . log ( \"\\tThis is tabbed over\\n\\tThis too.\" ); Example Output: Line 1 Line 2 Line 3 This is tabbed over This too.","title":"Using special characters with console.log()"},{"location":"javascript/javascript-language/#further-reading_5","text":"MDN - Web APIs: console.log() MDN - The JavaScript Reference: parseInt() MDN - The JavaScript Reference: parseFloat() MDN - The JavaScript Reference: window.prompt()","title":"Further reading"},{"location":"javascript/javascript-language/#user-defined-functions","text":"You define a function using the function keyword. Functions definitions can go anywhere in your file, but it helps to keep them all organized in a single area for readability: function sayHello () { console . log ( \"Hello!\" ); }","title":"User-defined functions"},{"location":"javascript/javascript-language/#calling-a-function","text":"Defining a function does not run the statements in the body of the function. To run a function, you call it like this: function sayHello () { console . log ( \"Hello!\" ); } sayHello (); // Hello!","title":"Calling a function"},{"location":"javascript/javascript-language/#adding-parameters-to-a-function","text":"When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); }","title":"Adding parameters to a function"},{"location":"javascript/javascript-language/#passing-arguments-to-a-function","text":"If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); } sayHello ( \"Daniel\" ); // Hello, Daniel!","title":"Passing arguments to a function"},{"location":"javascript/javascript-language/#returning-a-value-from-a-function","text":"You can return a value from a function by using the return keyword: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; }","title":"Returning a value from a function"},{"location":"javascript/javascript-language/#capturing-a-functions-return-value","text":"If a function returns a value, you can capture it in a varible: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } var total = add ( 2 , 3 ); console . log ( total ); // 5 You can also use the value immediately in another function, like console.log() or as part of a template-literal string: function add ( number1 , number2 ) { var total = number1 + number2 ; return total ; } console . log ( add ( 2 , 3 )) // 5 console . log ( `2 + 3 = ${ add ( 2 , 3 ) } ` ); // 2 + 3 = 5","title":"Capturing a function's return value"},{"location":"javascript/javascript-language/#indentation-in-functions","text":"Indentation is not required in JavaScript, but you should do it for readability. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you should also indent the body of that statement: function sayHello ( name ) { console . log ( `Hello, ${ name } !` ); if ( name == \"Daniel\" ) { console . log ( \"That's a cool name!\" ); } else { console . log ( \"Nice to meet you!\" ); } } sayHello ( \"Daniel\" ); sayHello ( \"Alec\" ); Example Output: Hello, Daniel! That's a cool name! Hello, Alec! Nice to meet you!","title":"Indentation in functions"},{"location":"javascript/javascript-language/#using-an-early-return-statement-to-exit-a-function","text":"A return statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body: function greetCodewizard ( name ) { var staff = [ \"danielj\" , \"alecg\" , \"dimas\" ]; if ( ! staff . includes ( name )) { console . log ( \"I don't know you!\" ); return ; } console . log ( `Hello, ${ name } !` ); } greetCodewizard ( \"danielj\" ); // Hello, danielj! greetCodewizard ( \"django\" ); // I don't know you!","title":"Using an early return statement to exit a function"},{"location":"javascript/javascript-language/#further-reading_6","text":"MDN - JavaScript Building Blocks: Functions EloquentJavaScript - Functions The Modern JavaScript Tutorial - Functions","title":"Further reading"},{"location":"javascript/javascript-language/#loops","text":"If you need to repeat something in your programs, you'll need to use one of JavaScript's looping mechanisms.","title":"Loops"},{"location":"javascript/javascript-language/#for","text":"JavaScript's for loop is one of the more complicated pieces of syntax in the langauge. The header of the for loop controls how many times the loop runs, and it consists of three parts: // header for ( counter ; loopContinuationCondition ; incrementOrDecrement ) { // body } The counter is a variable that will hold a number representing the current loop iteration (usually). The loopContinuationCondition is a boolean condition that determines whether the loop should continue. The incrementOrDecrement is a statement that modifies the counter after each loop completes. To see all three elements in action, consider this for loop, which loops 3 times and prints \"Hello\" to the console three times: for ( var counter = 0 ; counter < 3 ; counter ++ ) { console . log ( \"Hello\" ); } Example Output: Hello Hello Hello Generally, the counter is called i . This is a shorthand that many programmers use, and you'll see it in many courses at CWHQ. The name of the variable is completely up to the programmer: for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( \"Hello\" ); } Example Output: Hello Hello Hello","title":"for"},{"location":"javascript/javascript-language/#counter-controlled-repetition-with-the-for-loop","text":"A for loop is used to loop a certain number of times (called counter-controlled repetition). You generally perform some action in the body of a for loop: for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( ` ${ i } taco` ); } Example Output: 0 taco 1 taco 2 taco You can use a for loop to loop over an array , but the for...of loop is easier: var fruits = [ \"apple\" , \"banana\" , \"cherry\" ]; for ( var i = 0 ; i < fruits . length ; i ++ ) { console . log ( `Index number: ${ i } Fruit: ${ fruits [ i ] } ` ); } Example Output: Index number: 0 Fruit: apple Index number: 1 Fruit: banana Index number: 2 Fruit: cherry","title":"Counter-controlled repetition with the for loop"},{"location":"javascript/javascript-language/#looping-through-arrays-with-the-forof-loop","text":"The for...of loop is the easiest way to loop through the items in an array . Note the convention of a plural array name (fruits) and a singular loop-iteration variable (fruit): var fruits = [ \"apple\" , \"banana\" , \"cherry\" ]; for ( var fruit of fruits ) { console . log ( fruit ); } Example Output: apple banana cherry","title":"Looping through arrays with the for...of loop"},{"location":"javascript/javascript-language/#searching-for-a-value-in-a-forof-loop","text":"You can use a conditional statement inside a for...of loop to search for a particular item in an array and then do something: var fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ]; for ( var fruit of fruits ) { if ( fruit == \"orange\" ) { console . log ( ` ${ fruit } is the best fruit` ); } } Example Output: orange is the best fruit","title":"Searching for a value in a for...of loop"},{"location":"javascript/javascript-language/#finding-a-value-in-a-forof-loop-to-use-after-the-loop-finishes","text":"You can store an item from the for...of loop for later use by creating a variable before the for...of loop with some default value. var fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ]; var bestFruit ; for ( var fruit of fruits ) { if ( fruit == \"orange\" ) { bestFruit = fruit ; } } // The best fruit is orange. console . log ( `The best fruit is ${ bestFruit } .` )","title":"Finding a value in a for...of loop to use after the loop finishes"},{"location":"javascript/javascript-language/#creating-a-new-array-in-a-forof-loop","text":"Often, you'll want to loop through an array and build a new array from the contents of the original array . This technique is called mapping, and it's a common thing to do with arrays and for...of loops: var prices = [ 10 , 12 , 5 , 8 ]; var discounted_prices = []; for ( var price of prices ) { discounted_price = price - ( price * .10 ); discounted_prices . push ( discounted_price ); } // Here are your discounted prices: [9, 10.8, 4.5, 7.2] console . log ( `Here are your discounted prices: ${ discounted_prices } ` )","title":"Creating a new array in a for...of loop"},{"location":"javascript/javascript-language/#looping-through-objects-with-the-forin-loop","text":"The for...in loop is the easiest way to loop through the items in an object . The prop variable name is a convention, it represents each key (property) of the object : var users = { danielj : \"Admin\" , django : \"Support Staff\" , samh : \"Platform Developer\" , }; for ( var prop in users ) { console . log ( `Username: ${ prop } Role: ${ users [ prop ] } ` ); } Example Output: Username: danielj Role: Admin Username: django Role: Support Staff Username: samh Role: Platform Developer","title":"Looping through objects with the for...in loop"},{"location":"javascript/javascript-language/#further-reading_7","text":"MDN - JavaScript Reference - for MDN - JavaScript Reference - for...of MDN - JavaScript Reference - for...in Eloquent JavaScript - for loops The Modern JavaScript Tutorial - The \"for\" loop","title":"Further reading"},{"location":"javascript/javascript-language/#while","text":"A while loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop). For example, you can use a while loop to ask a user something until they answer correctly: var keepLooping = true ; // This variable controls whether we loop or not. while ( keepLooping ) { var userGuess = prompt ( \"What is the meaning of life? \" ); if ( userGuess == \"42\" ) { console . log ( \"That's correct!\" ); keepLooping = false ; // Stops the loop. } else { console . log ( \"That's incorrect! Please try again.\" ); } } Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct!","title":"while"},{"location":"javascript/javascript-language/#using-break-to-exit-a-loop","text":"You can also use a break statement instead of using a variable to control how many times an indefinite while loop runs: while ( true ) { userGuess = prompt ( \"What is the meaning of life? \" ); if ( userGuess == \"42\" ) { console . log ( \"That's correct!\" ); break ; // Stops the loop. } else { console . log ( \"That's incorrect! Please try again.\" ); } } Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct!","title":"Using break to exit a loop"},{"location":"javascript/javascript-language/#counter-controlled-repetition","text":"You can use a while loop to perform counter-controlled repetition as well, but the for loop is generally preferred for this: var counter = 0 ; while ( counter < 5 ) { console . log ( counter ); counter ++ ; // If you forget this, you'll have an infinite loop! } Example Output: 0 1 2 3 4","title":"Counter-controlled repetition"},{"location":"javascript/javascript-language/#further-reading_8","text":"MDN - JavaScript Rerference: while Eloquent JavaScript - while and do loops The Modern JavaScript Tutorial - The \"while\" loop","title":"Further reading"},{"location":"javascript/javascript-language/#math-operations","text":"JavaScript can perform most mathematical operations with ease. There are standard operators for all of the arithmetic operations and the Math object has access to many more operations for things like Trigonometry.","title":"Math Operations"},{"location":"javascript/javascript-language/#arithmetic-operators","text":"The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator: var total = 8 + 2 ; var difference = 8 - 2 ; var product = 8 * 2 ; var quotient = 8 / 2 ; console . log ( `8 + 2 = ${ total } ` ) // 8 + 2 = 10 console . log ( `8 - 2 = ${ difference } ` ) // 8 - 2 = 6 console . log ( `8 * 2 = ${ product } ` ) // 8 * 2 = 16 console . log ( `8 / 2 = ${ quotient } ` ) // 8 / 2 = 4","title":"Arithmetic Operators"},{"location":"javascript/javascript-language/#other-operators","text":"There are a few other common operators that JavaScript provides for common math operations.","title":"Other Operators"},{"location":"javascript/javascript-language/#modulo","text":"The modulo operator ( % ) returns the remainder after division: 10 % 3 // 1","title":"Modulo"},{"location":"javascript/javascript-language/#power","text":"The power operator ( ** ) multiplies a number by itself a given number of times: 3 ** 2 // 9","title":"Power"},{"location":"javascript/javascript-language/#further-reading_9","text":"MDN - The JavaScript Guide: Arithmetic Operators Eloquent JavaScript - Arithmetic The Modern JavaScript Tutorial - Basic operators, maths","title":"Further reading"},{"location":"javascript/javascript-language/#the-math-object","text":"JavaScript's Math object can be used to gain access to certain constants (such as PI), to perform trig calculations, or to get random numbers, among other things.","title":"The Math object"},{"location":"javascript/javascript-language/#getting-random-numbers-with-mathrandom","text":"The Math.random() method returns a random decimal number between 0 and 1: var randomNumber = Math . random (); console . log ( randomNumber ); // 0.1524438866958424 If you'd like to get a random whole number between a min and max , this helper function is useful: function random ( min , max ) { var num = Math . floor ( Math . random () * ( max - min + 1 )) + min ; return num ; } var randomNumber = random ( 1 , 10 ); console . log ( randomNumber ); // 9","title":"Getting random numbers with Math.random()"},{"location":"javascript/javascript-language/#rounding-with-mathfloor-and-mathceil","text":"To round a number down, use Math.floor() : var roundedNumber = Math . floor ( 4.6 ); console . log ( roundedNumber ); // 4 To round a number up, use Math.ceil() : var roundedNumber = Math . ceil ( 4.2 ); console . log ( roundedNumber ); // 4","title":"Rounding with Math.floor() and Math.ceil()"},{"location":"javascript/javascript-language/#further-reading_10","text":"MDN - The JavaScript Reference: Math MDN - The JavaScript Reference: Math","title":"Further reading"},{"location":"javascript/javascript-language/#variables","text":"Variables assign a name to a value. The naming convention in JavaScript is to use camelCase for variable names.","title":"Variables"},{"location":"javascript/javascript-language/#creating-a-variable","text":"You create a variable using the var keyword: var myVariable ; Usually, you create a variable and assign a value to the variable the assignment operator ( = ) at once: var myName = \"Daniel\" ; var myAge = 35 ;","title":"Creating a variable"},{"location":"javascript/javascript-language/#updating-a-numeric-variable","text":"You can update the value stored in a numeric variable like this: var score = 0 ; score = score + 1 ; // 0 + 1 console . log ( score ); // 1 score = score + 1 ; // 1 + 1 console . log ( score ); // 2 The same works for decreasing the value of a numeric variable: var score = 3 ; score = score - 1 ; // 3 - 1 console . log ( score ); // 2 score = score - 1 ; // 2 - 1 console . log ( score ); // 1 There is a shorthand notation for increasing and decreasing the value of a numeric variable: var score = 0 ; score += 1 ; // 0 + 1 console . log ( score ); // 1 score += 1 ; // 1 + 1 console . log ( score ); // 2 score -= 1 ; // 2 - 1 console . log ( score ); // 1 score -= 1 ; // 1 - 1 console . log ( score ); // 0 For an even more compact notation, you can use ++ or -- to increase/decrease the value of a numeric variable: var score = 0 ; score ++ ; // 0 + 1 console . log ( score ); // 1 score ++ ; // 1 + 1 console . log ( score ); // 2 score -- ; // 2 - 1 console . log ( score ); // 1 score -- ; // 1 - 1 console . log ( score ); // 0","title":"Updating a numeric variable"},{"location":"javascript/javascript-language/#global-vs-local-variables","text":"Any variable created outside of function definition is considered a global variable: // This is a global variable. var score = 0 ; function updateScore () { score = score + 1 ; // 1 } console . log ( score ); // 0 updateScore (); // Changes the global `score` variable console . log ( score ); // 1 Updates to global variables affect the variable throughout the program. If you want a variable to exist only inside of a function, you can make it local to the function by creating the variable (with the var keyword) inside the function: // This is a global variable. var score = 0 ; function updateScore () { // This is a local variable, it only exists within `updateScore()` var score = 1 ; } console . log ( score ); // 0 updateScore (); // Doesn't change the global `score` variable console . log ( score ); // 0","title":"Global vs. local variables"},{"location":"javascript/javascript-language/#further-reading_11","text":"MDN - JavaScript First Steps - Variables Eloquent JavaScript - Bindings The Modern JavaScript Tutorial - Variables","title":"Further reading"},{"location":"javascript/web-apis/","text":"TODO \u00b6 Add an explanation of what Web APIs are.","title":"Web APIs"},{"location":"javascript/web-apis/#todo","text":"Add an explanation of what Web APIs are.","title":"TODO"},{"location":"python/python-language/","text":"Python Language \u00b6 Python is a beginner-friendly language that we use in these courses at CodeWizardsHQ: Elementary Middle School High School Python Game Development Introduction to Programming with Python Intro to Python Mastering Databases APIs and Databases Application Programming Interfaces Professional Web App Development Mastering MVC Frameworks Object Relational Mapping In this section of our documentation, you'll find references to most of the core Python language features and built-in functions that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent Python resources: Python.org Documentation RealPython.com Think Python Comments \u00b6 Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program. Single Line Comments \u00b6 Single line comments begin with the # character. You can put them above or to the right of the line of code they reference: # Validate the user is logged in and redirect them to the appropriate page. if is_logged_in ( user ): redirect_to_homepage () else : redirect_to_login () MIN_HEIGHT = 60 # This is measured in inches, not feet! Deactivating Code \u00b6 You can deactivate sections of code with comments: if age < 18 : # Turning this off for now # prompt_user() redirect_to_kid_zone () else : login_user () Multiline Comments \u00b6 You can use multiline strings if you want to make a multiline comment: \"\"\" This calculates the hypotenuse of a right triangle when given the sides of the right triangle. It's the Pythagorean Theorem. The ** is how you write exponents in Python, and fractional exponents are like roots, so 0.5 is the square root. \"\"\" hypotenuse = (( side_a ** 2 ) + ( side_b ** 2 )) ** 0.5 Further reading \u00b6 The Python Tutorial Real Python - Writing Comments in Python Think Python - Comments Conditional Statements \u00b6 Conditional statements allow you to run a block of code when a boolean condition is true. if \u00b6 The if statement is the simplest form of conditional statement. If the expression to the right of the if keyword is True , the indented code block will execute: is_hungry = True if is_hungry : print ( \"You should eat!\" ) Example Output: You should eat! Usually, a conditional expression uses comparison operators to generate a bool result: age = 19 if age >= 18 : print ( \"You are legally an adult, congrats!\" ) Example Output: You are legally an adult, congrats! elif \u00b6 The elif conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to True will run: favorite_food = \"Tacos\" if favorite_food == \"Sushi\" : print ( \"We're going out for Japanese food to night!\" ) elif favorite_food == \"Pasta\" : print ( \"How about we eat some Italian food tonight?\" ) elif favorite_food == \"Tacos\" : print ( \"Time for some Mexican food!\" ) elif favorite_food == \"Samosa\" : print ( \"Let's eat Indian food tonight!\" ) Example Output: Time for some Mexican food! else \u00b6 The else conditional statement runs when all other conditional statements in a group are False . You can think of it as the default option: favorite_food = \"Hot Dogs with Cream Cheese\" if favorite_food == \"Sushi\" : print ( \"We're going out for Japanese food to night!\" ) elif favorite_food == \"Pasta\" : print ( \"How about we eat some Italian food tonight?\" ) elif favorite_food == \"Tacos\" : print ( \"Time for some Mexican food!\" ) elif favorite_food == \"Samosa\" : print ( \"Let's eat Indian food tonight!\" ) else : print ( \"I don't know what that favorite_food is!\" ) I don't know what that favorite_food is! Comparison Operators \u00b6 Here are the comparison operators that you can use in conditional expressions to generate a bool value: Operator Description > Greater-than >= Greater-than or equal-to < Less-than <= Less-than or equal-to == Equal-to != Not equal-to Complex Conditional Statements \u00b6 Complex conditional statements involve combining more than one conditional expression with logical operators : age = 15 height_in_feet = 4.6 if age >= 13 and height_in_feet > 5 : print ( \"You may ride the roller coaster.\" ) else : print ( \"You may NOT ride the roller coaster.\" ) Example Output: You may NOT ride the roller coaster. You can string as many logical operators together as you want to build more complex conditional statements: is_hungry = False is_thirsty = True food_amount = 10 drink_amount = 0 if is_hungry and food_amount > 0 or is_thirsty and drink_amount > 0 : enter_kitchen () else : play_video_games () Formatting complex conditional statements \u00b6 With a large complex conditional statement, it's often easier to read and reason about if you enclose the conditional expression in parentheses and split the statements across multiple lines: is_hungry = False is_thirsty = True food_amount = 10 drink_amount = 0 if ( is_hungry and food_amount > 0 or is_thirsty and drink_amount > 0 ): enter_kitchen () else : play_video_games () Logical Operators \u00b6 Logical operators allow you to combine multiple conditional expressions in a single conditional statement: Operator Description and True when both conditional expressions are True or True when either conditional expression is True not Reverses the value of a conditional expression Using the and operator \u00b6 The and operator evaluates to True when both conditional expressions are True : age = 15 height_in_feet = 5.2 if age >= 13 and height_in_feet > 5 : print ( \"You may ride the roller coaster.\" ) else : print ( \"You may NOT ride the roller coaster.\" ) Example Output: You may ride the roller coaster. Using the or operator \u00b6 The or operator evaluates to True when either conditional expression is True : is_hungry = True is_thirsty = False if is_hungry or is_thirsty : print ( \"You should go to the kitchen.\" ) else : print ( \"Do whatever, you're good!\" ) Example Output: You should go to the kitchen. Using the not operator \u00b6 The not operator reverses a conditional expression: is_tired = True if not is_tired : print ( \"Let's go outside and play.\" ) else : print ( \"Let's take a nap.\" ) Example Output: Let's take a nap. Nested Conditional Statements \u00b6 Conditional statements can be nested inside other conditional statements. You just have to follow the same indentation rules for each nested conditional block: role = \"admin\" if role == \"admin\" or role == \"developer\" : print ( \"You can see the secret stuff in this app.\" ) if role == \"admin\" : print ( \"You can also see the SUPER secret stuff in this app.\" ) Example Output: You can see the secret stuff in this app. You can also see the SUPER secret stuff in this app. Further reading \u00b6 Real Python - Conditional Statements in Python Real Python - Using the not Boolean Operator in Python Real Python - Using the and Boolean Operator in Python Real Python - How to use the Python or Operator The Python Library Reference - Boolean Operations The Python Library Reference - Boolean Values The Python Library Reference - Comparisons The Python Library Reference - Truth Value Testing The Python Tutorial - if Statements Think Python - Conditionals and Recursion Data Types \u00b6 Every value has a data type in Python. The data type determines what kinds of operations you can perform on the value. For example, you can't perform arithmetic between values that aren't numeric data types. bool \u00b6 The bool data type represents a True or a False value: is_hungry = True is_thirsty = False Generating bool in a conditional statement \u00b6 You normally won't use a bool directly, but instead will generate a bool in a conditional statement: age = 19 # This generates `True` if age >= 18 : print ( \"You are an adult!\" ) # This generates `False` if age < 18 : print ( \"You are a child.\" ) Truthy and falsy values \u00b6 Booleans are not the only values that can be True/False. Every value in Python is either truthy or falsy , which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy , and all other strings and numbers are truthy . Here's an example of a falsy value: username = \"\" if username : print ( f \"Hello, { username } !\" ) else : print ( \"The username is blank\" ) Example Output: The username is blank Here's an example of a truthy value: num_bananas = 2 if num_bananas : print ( \"We have bananas!\" ) else : print ( \"We have no bananas!\" ) Example Output: We have bananas! float \u00b6 The float data type represents a decimal number: total_cost = 29.99 int \u00b6 The int data type represents a whole number: num_tacos_eaten = 12 Converting str to int \u00b6 You can use the int() function to convert a str to an int : age = int ( \"13\" ) This is often combined with the input() function when you prompt the user for a numeric data type: age = int ( input ( \"How old are you? \" )) str \u00b6 The str data type represents a text value: name = \"Daniel\" String concatenation \u00b6 If you need to combine a variable and a str , you can use the + operator. This technique is called string concatenation : name = \"Daniel\" greeting = \"Hello, \" + name print ( greeting ) # Hello, Daniel String interpolation \u00b6 Another way to combine a variable and a str is using f-strings . This technique is called string interpolation , and it is the preferred way to combine variables and str : name = \"Daniel\" age = 35 print ( f \"I'm { name } and I'm { age } years old.\" ) Example Output: I'm Daniel and I'm 35 years old. Multiline strings \u00b6 Multiline strings allow you to write large blocks of text in a single print() statement: menu = \"\"\" Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* \"\"\" print ( menu ) Example Output: Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* Removing the intial newline of a multiline string \u00b6 You can remove the initial newline from a multiline string using the \\ character: options = \"\"\" \\ (1) View All Contacts (2) View Contact (3) Add Contact (4) Update Contact (5) Remove Contact (6) Exit \"\"\" print ( options ) Example Output: (1) View All Contacts (2) View Contact (3) Add Contact (4) Update Contact (5) Remove Contact (6) Exit Raw strings \u00b6 Raw strings ( str prefaced with an r ) tell Python to not interpret special str characters. You use them in CWHQ courses to print ASCII art and ensure it formats correctly. Generally, r strings will also be multiline strings, but this isn't required: mr_nibbles = r \"\"\" |\\---/| | o_o | \\_^_/ \"\"\" print ( mr_nibbles ) Example Output: |\\---/| | o_o | \\_^_/ Getting the number of characters in a str \u00b6 You can use the len() function to get the number of characters in a str : name = \"Daniel\" len ( name ) # 6 Checking if a str ends with a set of characters \u00b6 The str.endswith() method lets you check if a str ends with a given pattern: email_addresses = [ \"djs@cwhq.com\" , \"alecg@auburn.edu\" , \"samh@bridges.com\" ] for email_address in email_addresses : if email_address . endswith ( \".edu\" ): print ( f \" { email_address } is a school address\" ) elif email_address . endswith ( \"cwhq.com\" ): print ( f \" { email_address } is a CWHQ employee address\" ) else : print ( f \"I don't know what { email_address } is for\" ) Example Output: djs@cwhq.com is a CWHQ employee address alecg@auburn.edu is a school address I don't know what sam@bridges.com is for Sanitizing user input \u00b6 User's do strange things, but using str.lower() and str.strip() can help your program to validate str data types. str.lower() makes a str lowercase: # Imagine a user entered \"Pizza\" with an uppercase P favorite_food = \"Pizza\" if favorite_food . lower () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! str.strip() removes leading or trailing whitespace from a str : # Imagine a user entered \" pizza\" with a leading space character favorite_food = \" pizza\" if favorite_food . strip () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! You can chain these methods together to sanitize a str completely: # What a mess! Extra spaces before/after and odd capitalization favorite_food = \" PIzZa \" if favorite_food . strip () . lower () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! Further reading \u00b6 The Python Library Reference - Text Sequence Type The Python Library Reference - Numeric Types The Python Tutorial - Strings Think Python - Values and Types Think Python - Strings Real Python - Python 3's f-Strings Real Python - Strings and Character Data in Python Data Structures \u00b6 Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house. list \u00b6 The list data structure is used to store data in ordered slots . It is known as mutable sequence type , which means it can be modified after creation. Usually, the items in a list are homogeneous, which means they represent a group of similar items of the same data type: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] menu_prices = [ 4.50 , 5.75 , 3.00 ] ids = [ 184 , 294 , 832 , 98 , 4 ] You can write a list on multiple lines if you want. The trailing comma is recommended but not required: foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"ice cream\" , \"asparagus\" , ] Accessing items in a list \u00b6 You can access individual items in a list using the [] characters and the index number of the item. The index numbers start at 0: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( names [ 0 ]) # alecg print ( names [ 1 ]) # danielj print ( names [ 2 ]) # dimas Adding an item to a list \u00b6 To add an item to a list after it has been created, you can use the list.append() method. The list.append() method adds the item to the end of the list: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . append ( \"samh\" ) print ( names ) # ['alecg', 'danielj', 'dimas', 'samh'] Updating an item in a list \u00b6 To update a list item, replace the value at the index: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names [ 1 ] = \"django\" print ( names ) # ['alecg', 'django', 'dimas'] Removing an item from a list \u00b6 To remove an item from a list , you can use the list.remove() method: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . remove ( \"alecg\" ) print ( names ) # ['danielj', 'dimas'] If you want to remove an item from a list by its index number, use the list.pop() method: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . pop ( 0 ) print ( names ) # ['danielj', 'dimas'] Looping through a list \u00b6 To loop through the items in a list , use a for loop. Note the convention of using the plural names for the list and the singular name for the loop-iteration variable: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( \"This documentation is brought to you by:\" ) for name in names : print ( name ) Example Output: This documentation is brought to you by: alecg danielj dimas Getting the number of items in a list \u00b6 To get the number of items in a list , use the len() function: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] num_names = len ( names ) print ( num_names ) # 3 Checking if an item is contained in a list \u00b6 To check if an item is contained in a list , use the in operator: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] \"alecg\" in names # True \"samh\" in names # False The in operator is generally used as part of a conditional statement: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] if \"alecg\" in names : print ( \"alecg is in the 'names' list\" ) else : print ( \"alecg is NOT in the 'names' list\" ) if \"samh\" in names : print ( \"samh is in the 'names' list\" ) else : print ( \"samh is NOT in the 'names' list\" ) Example Output: alecg is in the 'names' list samh is NOT in the 'names' list Further reading \u00b6 The Python Library Reference - Common Sequence Operations The Python Library Reference - Mutable Sequence Types The Python Library Reference - len() The Python Tutorial - Lists Think Python - Lists dict \u00b6 The dict data structure is used to store data in key/value pairs: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } You can use the dict() function to build a dict as well, note that the keys are keyword arguments: staff = dict ( danielj = \"Curriculum Developer\" , alecg = \"Curriculum Instructor\" , dimas = \"Designer\" , ) Accessing items in a dict \u00b6 You have to know the key to access an individual item in a dict : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } daniel_job = staff [ \"danielj\" ] print ( f \"Daniel is a { daniel_job } .\" ) # Daniel is a Curriculum Developer. alec_job = staff [ \"alecg\" ] print ( f \"Alec is a { alec_job } .\" ) # Alec is a Curriculum Instructor. dima_job = staff [ \"dimas\" ] print ( f \"Dima is a { dima_job } .\" ) # Dima is a Designer. If you need to pull a value from a dict inside an f-string , you must use different quote characters for the key (if it's a str ). students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } print ( f \"Vicki is in { students [ 'Vicki' ] } \" ) # Vicki is in 3rd grade print ( f \"Sam is in { students [ 'Sam' ] } \" ) # Sam is in 4th grade print ( f \"Tammy is in { students [ 'Tammy' ] } \" ) # Tammy is in 4th grade Adding an item to a dict \u00b6 You can add an item to a dict by providing the key/value pair (it's the same syntax as updating an item): staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff [ \"django\" ] = \"Director Of Pug Snorts\" print ( staff ) # {'danielj': 'Curriculum Developer', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer', 'django': 'Director Of Pug Snorts'} Updating an item in a dict \u00b6 To update an item in a dict , you must know the key: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff [ \"danielj\" ] = \"Burrito Taste-Tester\" print ( staff ) # {'danielj': 'Burrito Taste-Tester', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer'} Removing an item from a dict \u00b6 To remove an item from a dict , use the dict.pop() method: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff . pop ( \"danielj\" ) print ( staff ) # {'alecg': 'Curriculum Instructor', 'dimas': 'Designer'} Looping through a dict \u00b6 To loop through a dict , you generally use the dict.items() method like this: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } for name , job in staff . items (): print ( f \" { name } is a { job } .\" ) Example Output: danielj is a Curriculum Developer. alecg is a Curriculum Instructor. dimas is a Designer. If you just want to loop over the keys of a dict , you can use a for loop just as you would with a list : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } print ( \"CWHQ staff:\" ) for name in staff : print ( name ) Example Output: danielj alecg dimas Getting the keys from a dict \u00b6 If you need to get all of the keys from a dict , use the dict.keys() method. Note, you'll usually want to cast the result to a list , which is why the list() function is used here: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } names = list ( staff . keys ()) print ( f \"Here are all the names in the staff dict: { names } \" ) Example Output: Here are all the names in the staff dict: ['danielj', 'alecg', 'dimas'] Getting the values from a dict \u00b6 If you need to get all of the values from a dict , use the dict.values() method. Note, you'll usually want to cast the result to a list , which is why the list() function is used here: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } jobs = list ( staff . values ()) print ( f \"Here are all the jobs in the staff dict: { jobs } \" ) Example Output: Here are all the jobs in the staff dict: ['Curriculum Developer', 'Curriculum Instructor', 'Designer'] Getting the number of items in a dict \u00b6 You can use the len() function to get the number of items in a dict : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } number_of_staff = len ( staff ) print ( f \"We have { number_of_staff } people on our staff.\" ) # We have 3 people on our staff. Checking if an item is contained in a dict \u00b6 To check if an item is contained in a dict , use the in operator: students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if \"Vicki\" in students : print ( \"Vicki is a student here\" ) Example Output: Vicki is a student here You can use the not operator before the in operator to test if a key is not in a dict : students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if \"Daniel\" not in students : print ( \"Daniel is NOT a student here\" ) Example Output: Daniel is NOT a student here Using dict.get() to test if an item is in a dict \u00b6 The dict.get() method can be used as an alternative to in and not in . It returns the value of the given key or the special None value, which is used to indicate the absence of any valid value. The is operator is similar to == , but it checks if the two values are the same exact thing in memory: students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if students . get ( \"Vicki\" ) is not None : print ( \"Vicki is a student here\" ) if students . get ( \"Daniel\" ) is None : print ( \"Daniel is NOT a student here\" ) Example Output: Vicki is a student here Daniel is NOT a student here Further reading \u00b6 Real Python - Dictionaries in Python The Python Library Reference - Mapping Types: dict The Python Tutorial - Dictionaries Think Python - Dictionaries Functions \u00b6 Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y. (Don't Repeat Yourself) principle because they reduce unnecessary repetition. Built-in functions \u00b6 Python comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below. float() \u00b6 The float() function converts data to a float : pi = float ( \"3.14\" ) print ( pi ) # 3.14 type ( pi ) # <class 'float'> two = float ( 2 ) print ( two ) # 2.0 type ( two ) # <class 'float'> input() \u00b6 The input() function allows you to prompt a user. The user's response is returned as a str , which you can store in a variable: name = input ( \"What is your name? \" ) print ( f \"Nice to meet you, { name } !\" ) Example Output: What is your name? Daniel Nice to meet you, Daniel! int() \u00b6 The int() function converts data to an int : int_pi = int ( 3.14 ) print ( int_pi ) # 3 type ( int_pi ) # <class 'int'> meaning_of_life = int ( \"42\" ) print ( meaning_of_life ) # 42 type ( meaning_of_life ) # <class 'int'> len() \u00b6 The len() function returns the length of a sequence such as a list or str : number_of_characters = len ( \"How many characters are in this str?\" ) print ( number_of_characters ) # 36 favorite_foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"burritos\" ] number_of_foods = len ( favorite_foods ) print ( number_of_foods ) # 4 list() \u00b6 The list() function creates a list from a sequence such as the result of dict.keys() , dict.values() , or a str : character_list = list ( \"Hello!\" ) print ( character_list ) # ['H', 'e', 'l', 'l', 'o', '!'] staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } names = list ( staff . keys ()) print ( names ) # ['danielj', 'alecg', 'dimas'] jobs = list ( staff . values ()) print ( jobs ) # ['Curriculum Developer', 'Curriculum Instructor', 'Designer'] print() \u00b6 The print() function displays text on the screen: print ( \"Hello, world!\" ) # Hello, world! Using special characters with print() \u00b6 You can use special characters such as \\n and \\t to format the text a bit. The \\n adds a newline (like hitting enter on your keyboard) and the \\t adds a tab: print ( \"Line 1 \\n Line 2 \\n Line 3 \\n \" ) print ( \" \\t This is tabbed over \\n\\t This too.\" ) Example Output: Line 1 Line 2 Line 3 This is tabbed over This too. Using the splat ( * ) operator to print a list \u00b6 You an use the splat ( * ) operator to print the items of a list : names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( * names ) # alecg danielj dimas Using the sep parameter \u00b6 The sep parameter of print() let's you specifiy a given separator to add between each item passed to print() . It is commonly used in combination with the splat ( * ) operator to print the items of a list with a given separator between each item: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( * names , sep = \" -- \" ) # alecg -- danielj -- dimas range() \u00b6 The range() function is mainly used for counter-controlled repetition with a for loop: for num in range ( 1 , 4 ): print ( f \" { num } potato\" ) Example Output: 1 potato 2 potato 3 potato Note that the last number is 3 in the example above, not 4! Using the step parameter of the range() function \u00b6 The range() function takes a third argument, step , which allows you to generate sequences of numbers separated by a given step: for num in range ( 1 , 11 , 3 ): print ( num ) Example Output: 1 4 7 10 sorted() \u00b6 The sorted() function is used to sort a list : names = [ \"danielj\" , \"alecg\" , \"dimas\" ] sorted_names = sorted ( names ) print ( sorted_names ) # ['alecg', 'danielj', 'dimas'] You can pass keyword arguments to the sorted() function to customize the way the list is sorted. For example, the key argument can be a function to run on each item of the list before sorting: names = [ \"Danielj\" , \"alecg\" , \"Dimas\" ] sorted_names = sorted ( names ) # Notice how these aren't sorted correctly? Uppercase letters are \"smaller\" # than lowercase letters in the sorting algorithm that `sort()` uses! print ( sorted_names ) # ['Danielj', 'Dimas', 'alecg'] sorted_names = sorted ( names , key = str . lower ) # Now, everything is sorted correctly, and the original values haven't been # changed. `sort()` only uses the `key` function during the sorting process. print ( sorted_names ) # ['alecg', 'Danielj', 'Dimas'] The reverse keyword argument of sort() is used to sort from high-to-low instead of low-to-high. It expects a bool value: names = [ \"danielj\" , \"alecg\" , \"dimas\" ] reverse_sorted_names = sorted ( names , reverse = True ) print ( reverse_sorted_names ) # ['dimas', 'danielj', 'alecg'] str() \u00b6 The str() function turns its argument into a str data type. This comes in handy if you have a number but want to treat it like a str : meaning_of_life = 42 print ( \"The meaning of life is \" + str ( meaning_of_life )) Example Output: The meaning of life is 42 If you use f-strings , you don't have to worry about converting numbers to str when working with str data: meaning_of_life = 42 print ( f \"The meaning of life is { meaning_of_life } \" ) Example Output: The meaning of life is 42 Further reading \u00b6 The Python Library Reference - Built-in Functions User-defined functions \u00b6 You define a function using the def keyword, and function definitions go at the TOP of your file: def say_hello (): print ( \"Hello!\" ) Calling a function \u00b6 Defining a function does not run the statements in the body of the function. To run a function, you call it like this: def say_hello (): print ( \"Hello!\" ) say_hello () # Hello! Adding parameters to a function \u00b6 When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer: def say_hello ( name ): print ( f \"Hello, { name } !\" ) Passing arguments to a function \u00b6 If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function: def say_hello ( name ): print ( f \"Hello, { name } !\" ) say_hello ( \"Daniel\" ) # Hello, Daniel! Returning a value from a function \u00b6 You can return a value from a function by using the return keyword: def add ( number_1 , number_2 ): total = number_1 + number_2 return total Capturing a function's return value \u00b6 If a function returns a value, you can capture it in a varible: def add ( number_1 , number_2 ): total = number_1 + number_2 return total total = add ( 2 , 3 ) print ( total ) # 5 You can also use the value immediately in another function, like print() : def add ( number_1 , number_2 ): total = number_1 + number_2 return total print ( add ( 2 , 3 )) # 5 print ( f \"2 + 3 = { add ( 2 , 3 ) } \" ) # 2 + 3 = 5 Indentation in functions \u00b6 The base-level of indentation in a function is 4 spaces. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you need to indent the body of that statement by 4 more spaces: def say_hello ( name ): print ( f \"Hello, { name } !\" ) if name == \"Daniel\" : print ( \"That's a cool name!\" ) else : print ( \"Nice to meet you!\" ) say_hello ( \"Daniel\" ) say_hello ( \"Alec\" ) Example Output: Hello, Daniel! That's a cool name! Hello, Alec! Nice to meet you! Using an early return statement to exit a function \u00b6 A return statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body: def greet_codewizard ( name ): if name not in [ \"danielj\" , \"alecg\" , \"dimas\" ]: print ( \"I don't know you!\" ) return print ( f \"Hello, { name } !\" ) greet_codewizard ( \"danielj\" ) # Hello, danielj! greet_codewizard ( \"django\" ) # I don't know you! Further reading \u00b6 Real Python - Defining Your Own Python Function The Python Tutorial - Defining Functions Think Python - Functions Think Python - Fruitful Functions Loops \u00b6 If you need to repeat something in your programs, you'll need to use one of Python's looping mechanisms. for \u00b6 A for loop is generally used to loop over a sequence, such as a list : fruits = [ \"apple\" , \"banana\" , \"cherry\" ] for fruit in fruits : print ( fruit ) Example Output: apple banana cherry You can also use a for loop to loop over the characters in a str : name = \"Daniel\" for letter in name : print ( letter ) Example Output: D a n i e l Counter-controlled repetition \u00b6 You can combine the range() function and the for loop to create a counter-controlled loop: for num in range ( 1 , 4 ): print ( f \" { num } potato\" ) Example Output: 1 potato 2 potato 3 potato Searching for a value in a for loop \u00b6 You can use a conditional statement inside a for loop to search for a particular item in a list and then do something. Note the indentation: fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ] for fruit in fruits : if fruit == \"orange\" : print ( f \" { fruit } is the best fruit\" ) Example Output: orange is the best fruit Finding a value in a for loop to use after the loop finishes \u00b6 You can store an item from the for loop for later use by creating a variable before the for loop with some default value. fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ] # The best_fruit will be a str, so the empty str is a good default. best_fruit = \"\" for fruit in fruits : if fruit == \"orange\" : best_fruit = fruit # The best fruit is orange. print ( f \"The best fruit is { best_fruit } .\" ) Creating a new list in a for loop \u00b6 Often, you'll want to loop through a list and build a new list from the contents of the original list . This technique is called mapping, and it's a common thing to do with lists and for loops: prices = [ 10 , 12 , 5 , 8 ] discounted_prices = [] for price in prices : discounted_price = price - ( price * .10 ) discounted_prices . append ( discounted_price ) # Here are your discounted prices:[9, 10.8, 4.5, 7.2] print ( f \"Here are your discounted prices: { discounted_prices } \" ) Creating a list of a pre-determined size with a for loop \u00b6 Using a for loop and the range() function, you can fill a list to a pre-determined size: fruits = [] for num in range ( 1 , 5 ): fruit = input ( f \"Enter fruit number { num } : \" ) fruits . append ( fruit ) Example Output: Enter fruit number 1: apples Enter fruit number 2: bananas Enter fruit number 3: oranges Enter fruit number 4: kiwi Further reading \u00b6 Real Python - Python for Loops The Python Tutorial - for Statements The Python Tutorial - The range() function Think Python - Traversal with a for loop while \u00b6 A while loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop). For example, you can use a while loop to ask a user something until they answer correctly: keep_looping = True # This variable controls whether we loop or not. while keep_looping : user_guess = input ( \"What is the meaning of life? \" ) if user_guess == \"42\" : print ( \"That's correct!\" ) keep_looping = False # Stops the loop. else : print ( \"That's incorrect! Please try again.\" ) Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct! Using break to exit a loop \u00b6 You can also use a break statement instead of using a variable to control how many times an indefinite while loop runs: while True : user_guess = input ( \"What is the meaning of life? \" ) if user_guess == \"42\" : print ( \"That's correct!\" ) break # Stops the loop. else : print ( \"That's incorrect! Please try again.\" ) Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct! Counter-controlled repetition \u00b6 You can use a while loop to perform counter-controlled repetition as well, but the for loop with the range() function is generally preferred: counter = 0 while counter < 5 : print ( counter ) counter += 1 # If you forget this, you'll have an infinite loop! Example Output: 0 1 2 3 4 Further reading \u00b6 Real Python - Python while Loops Think Python - The while statement Math Operations \u00b6 Python is used heavily in math-related fields, so there are a large suite of tools for performing mathematical operations built-in to the language. Arithmetic Operators \u00b6 The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator: total = 8 + 2 difference = 8 - 2 product = 8 * 2 quotient = 8 / 2 print ( f \"8 + 2 = { total } \" ) # 8 + 2 = 10 print ( f \"8 - 2 = { difference } \" ) # 8 - 2 = 6 print ( f \"8 * 2 = { product } \" ) # 8 * 2 = 16 print ( f \"8 / 2 = { quotient } \" ) # 8 / 2 = 4.0 Note that in the example above, division always produces a float . Arithmetic only works between numbers \u00b6 Both data types must be numeric data types, you cannot perform arithmetic between a str and a number. num_tacos = 2 + \"1\" # no num_tacos = \"2\" + \"1\" # no num_tacos = \"1\" * 3 # no num_tacos = \"1\" * \"3\" # no Other Operators \u00b6 There are a few other common operators that Pythonistas use when performing math in Python. Modulo \u00b6 The modulo operator ( % ) returns the remainder after division: 10 % 3 # 1 Power \u00b6 The power operator ( ** ) multiplies a number by itself a given number of times: 3 ** 2 # 9 Floor division \u00b6 The floor division operator ( // ) removes any fractional portion after divison: 10 // 3 # 3 Further reading \u00b6 The Python Tutorial - Numbers Real Python - Numbers in Python Modules \u00b6 Python is often called a batteries-included language because of the plethora of built-in modules that the language contains. Modules are just Python files full of functionality that you don't have to write yourself; you merely import the things you want from a module and use them in your programs. Getting access to functions in modules \u00b6 To get a function from a module, you import it. There are several different types of imports, which we'll briefly cover below. Importing a single function \u00b6 To import a single function, just write the function name (without parentheses) after the import keyword: from module_name import function_name Importing multiple functions \u00b6 If you need to import multiple functions from a module, separate them by commas: from module_name import some_function , some_other_function Importing all functions \u00b6 To import all items from a module (not recommended generally, but we do this in some courses like E24 and M11), use the * import syntax: from module_name import * Renaming imported functions \u00b6 Sometimes, its nice to rename a function you import from a module (like when the function name is really long or confusing). You can do this using the as keyword: from module_name import some_really_long_function_name as short_name Further reading \u00b6 The Python Library Reference The Python Tutorial - Modules Real Python - Python Modules and Packages Built-in modules \u00b6 Python comes with 100s of built-in modules. We'll briefly cover a few that are used often at CWHQ in this section. See the Further Reading section for details on where you can browse all of Python's built-in modules. random \u00b6 The random module is used to add randomness to your programs. Getting a random integer \u00b6 You use the randint() function to get a random integer between two numbers: from random import randint # Get an integer between 1 and 10 random_integer = randint ( 1 , 10 ) print ( random_integer ) # 3 Getting a random value from a sequence \u00b6 You use the choice() function to get a random value from a sequence ( str , list , or tuple ): from random import choice names = [ \"daniel\" , \"alec\" , \"dima\" ] random_name = choice ( names ) print ( random_name ) # dima Further reading \u00b6 The Python Standard Library The Python Standard Library - random The pass statement \u00b6 You use the pass statement to act as a placeholder in a conditional statement or function definition. Programmers refer to this as \"stubbing-out\" the code block. No logic will run in the block a pass statement appears in. Python needs the pass statement because you can't have empty function or conditional blocks. Using pass in a function \u00b6 The pass statement can be used in a function definition as a placeholder before you write the main logic. This ensures your program still works but gives you a convenient way to see that you still need to implement some logic: def order_pizza (): pass Using pass in a conditional statement \u00b6 The pass statement can also be used in a conditioal statement. This comes in handy if you know that you need a conditional statement but you don't have any of the logic ready yet: action = input ( \"What do you want to do? \" ) if action == \"Order Pizza\" : order_pizza () elif action == \"Order Tacos\" : pass Variables \u00b6 Variables assign a name to a value. The naming convention in Python is to use snake_case for variable names, and UPPER_SNAKE_CASE for named constants. Creating a variable \u00b6 You create a variable by assigning a name to a value using the assignment operator ( = ): my_name = \"Daniel\" my_age = 35 Creating a named constant \u00b6 Named constants can replace magic numbers in your program. For example, what does 1 and 2 represent here? if user_choice == 1 : # Do something cool... elif user_choice == 2 : # Do another cool thing... 1 and 2 in the example above are magic numbers because we would have to hunt down their meaning by reading more of the program. If we instead create a named constant for each, the meaning is clearer: ORDER_TACOS = 1 ORDER_PIZZA = 2 if user_choice == ORDER_TACOS : # Order tacos... elif user_choice == ORDER_PIZZA : # Order pizza Updating the value of a variable \u00b6 You can update the value stored in a variable like this: score = 0 score = score + 1 # 0 + 1 print ( score ) # 1 score = score + 1 # 1 + 1 print ( score ) # 2 The same works for decreasing the value of a variable: score = 3 score = score - 1 # 3 - 1 print ( score ) # 2 score = score - 1 # 2 - 1 print ( score ) # 1 There's also a shorthand notation: score = 0 score += 1 # 0 + 1 print ( score ) # 1 score += 1 # 1 + 1 print ( score ) # 2 score -= 1 # 2 - 1 print ( score ) # 1 score -= 1 # 1 - 1 print ( score ) # 0 Global variables \u00b6 Any variable created outside of function definition is considered a global variable. If you want to modify a global variable from inside a function definition, you need to use the global keyword: # This is a global variable score = 0 def update_score (): # Must do this to modify the variable global score # Now this is OK score = score + 1 # 1 Further reading \u00b6 Real Python - Variables in Python Think Python - Variables, expressions and statements","title":"Python Language"},{"location":"python/python-language/#python-language","text":"Python is a beginner-friendly language that we use in these courses at CodeWizardsHQ: Elementary Middle School High School Python Game Development Introduction to Programming with Python Intro to Python Mastering Databases APIs and Databases Application Programming Interfaces Professional Web App Development Mastering MVC Frameworks Object Relational Mapping In this section of our documentation, you'll find references to most of the core Python language features and built-in functions that we use in our CodeWizardsHQ courses. You'll also find many Further reading sections, which pull from these excellent Python resources: Python.org Documentation RealPython.com Think Python","title":"Python Language"},{"location":"python/python-language/#comments","text":"Programmers use comments to make notes in their source code for themselves or other programmers that will read their code later. They can also be used to \"deactivate\" lines of code that you don't want to run while you're working on a program.","title":"Comments"},{"location":"python/python-language/#single-line-comments","text":"Single line comments begin with the # character. You can put them above or to the right of the line of code they reference: # Validate the user is logged in and redirect them to the appropriate page. if is_logged_in ( user ): redirect_to_homepage () else : redirect_to_login () MIN_HEIGHT = 60 # This is measured in inches, not feet!","title":"Single Line Comments"},{"location":"python/python-language/#deactivating-code","text":"You can deactivate sections of code with comments: if age < 18 : # Turning this off for now # prompt_user() redirect_to_kid_zone () else : login_user ()","title":"Deactivating Code"},{"location":"python/python-language/#multiline-comments","text":"You can use multiline strings if you want to make a multiline comment: \"\"\" This calculates the hypotenuse of a right triangle when given the sides of the right triangle. It's the Pythagorean Theorem. The ** is how you write exponents in Python, and fractional exponents are like roots, so 0.5 is the square root. \"\"\" hypotenuse = (( side_a ** 2 ) + ( side_b ** 2 )) ** 0.5","title":"Multiline Comments"},{"location":"python/python-language/#further-reading","text":"The Python Tutorial Real Python - Writing Comments in Python Think Python - Comments","title":"Further reading"},{"location":"python/python-language/#conditional-statements","text":"Conditional statements allow you to run a block of code when a boolean condition is true.","title":"Conditional Statements"},{"location":"python/python-language/#if","text":"The if statement is the simplest form of conditional statement. If the expression to the right of the if keyword is True , the indented code block will execute: is_hungry = True if is_hungry : print ( \"You should eat!\" ) Example Output: You should eat! Usually, a conditional expression uses comparison operators to generate a bool result: age = 19 if age >= 18 : print ( \"You are legally an adult, congrats!\" ) Example Output: You are legally an adult, congrats!","title":"if"},{"location":"python/python-language/#elif","text":"The elif conditional statement is used to group logically related conditional statements together. The first conditional expression that evaluates to True will run: favorite_food = \"Tacos\" if favorite_food == \"Sushi\" : print ( \"We're going out for Japanese food to night!\" ) elif favorite_food == \"Pasta\" : print ( \"How about we eat some Italian food tonight?\" ) elif favorite_food == \"Tacos\" : print ( \"Time for some Mexican food!\" ) elif favorite_food == \"Samosa\" : print ( \"Let's eat Indian food tonight!\" ) Example Output: Time for some Mexican food!","title":"elif"},{"location":"python/python-language/#else","text":"The else conditional statement runs when all other conditional statements in a group are False . You can think of it as the default option: favorite_food = \"Hot Dogs with Cream Cheese\" if favorite_food == \"Sushi\" : print ( \"We're going out for Japanese food to night!\" ) elif favorite_food == \"Pasta\" : print ( \"How about we eat some Italian food tonight?\" ) elif favorite_food == \"Tacos\" : print ( \"Time for some Mexican food!\" ) elif favorite_food == \"Samosa\" : print ( \"Let's eat Indian food tonight!\" ) else : print ( \"I don't know what that favorite_food is!\" ) I don't know what that favorite_food is!","title":"else"},{"location":"python/python-language/#comparison-operators","text":"Here are the comparison operators that you can use in conditional expressions to generate a bool value: Operator Description > Greater-than >= Greater-than or equal-to < Less-than <= Less-than or equal-to == Equal-to != Not equal-to","title":"Comparison Operators"},{"location":"python/python-language/#complex-conditional-statements","text":"Complex conditional statements involve combining more than one conditional expression with logical operators : age = 15 height_in_feet = 4.6 if age >= 13 and height_in_feet > 5 : print ( \"You may ride the roller coaster.\" ) else : print ( \"You may NOT ride the roller coaster.\" ) Example Output: You may NOT ride the roller coaster. You can string as many logical operators together as you want to build more complex conditional statements: is_hungry = False is_thirsty = True food_amount = 10 drink_amount = 0 if is_hungry and food_amount > 0 or is_thirsty and drink_amount > 0 : enter_kitchen () else : play_video_games ()","title":"Complex Conditional Statements"},{"location":"python/python-language/#formatting-complex-conditional-statements","text":"With a large complex conditional statement, it's often easier to read and reason about if you enclose the conditional expression in parentheses and split the statements across multiple lines: is_hungry = False is_thirsty = True food_amount = 10 drink_amount = 0 if ( is_hungry and food_amount > 0 or is_thirsty and drink_amount > 0 ): enter_kitchen () else : play_video_games ()","title":"Formatting complex conditional statements"},{"location":"python/python-language/#logical-operators","text":"Logical operators allow you to combine multiple conditional expressions in a single conditional statement: Operator Description and True when both conditional expressions are True or True when either conditional expression is True not Reverses the value of a conditional expression","title":"Logical Operators"},{"location":"python/python-language/#using-the-and-operator","text":"The and operator evaluates to True when both conditional expressions are True : age = 15 height_in_feet = 5.2 if age >= 13 and height_in_feet > 5 : print ( \"You may ride the roller coaster.\" ) else : print ( \"You may NOT ride the roller coaster.\" ) Example Output: You may ride the roller coaster.","title":"Using the and operator"},{"location":"python/python-language/#using-the-or-operator","text":"The or operator evaluates to True when either conditional expression is True : is_hungry = True is_thirsty = False if is_hungry or is_thirsty : print ( \"You should go to the kitchen.\" ) else : print ( \"Do whatever, you're good!\" ) Example Output: You should go to the kitchen.","title":"Using the or operator"},{"location":"python/python-language/#using-the-not-operator","text":"The not operator reverses a conditional expression: is_tired = True if not is_tired : print ( \"Let's go outside and play.\" ) else : print ( \"Let's take a nap.\" ) Example Output: Let's take a nap.","title":"Using the not operator"},{"location":"python/python-language/#nested-conditional-statements","text":"Conditional statements can be nested inside other conditional statements. You just have to follow the same indentation rules for each nested conditional block: role = \"admin\" if role == \"admin\" or role == \"developer\" : print ( \"You can see the secret stuff in this app.\" ) if role == \"admin\" : print ( \"You can also see the SUPER secret stuff in this app.\" ) Example Output: You can see the secret stuff in this app. You can also see the SUPER secret stuff in this app.","title":"Nested Conditional Statements"},{"location":"python/python-language/#further-reading_1","text":"Real Python - Conditional Statements in Python Real Python - Using the not Boolean Operator in Python Real Python - Using the and Boolean Operator in Python Real Python - How to use the Python or Operator The Python Library Reference - Boolean Operations The Python Library Reference - Boolean Values The Python Library Reference - Comparisons The Python Library Reference - Truth Value Testing The Python Tutorial - if Statements Think Python - Conditionals and Recursion","title":"Further reading"},{"location":"python/python-language/#data-types","text":"Every value has a data type in Python. The data type determines what kinds of operations you can perform on the value. For example, you can't perform arithmetic between values that aren't numeric data types.","title":"Data Types"},{"location":"python/python-language/#bool","text":"The bool data type represents a True or a False value: is_hungry = True is_thirsty = False","title":"bool"},{"location":"python/python-language/#generating-bool-in-a-conditional-statement","text":"You normally won't use a bool directly, but instead will generate a bool in a conditional statement: age = 19 # This generates `True` if age >= 18 : print ( \"You are an adult!\" ) # This generates `False` if age < 18 : print ( \"You are a child.\" )","title":"Generating bool in a conditional statement"},{"location":"python/python-language/#truthy-and-falsy-values","text":"Booleans are not the only values that can be True/False. Every value in Python is either truthy or falsy , which means they can be used in conditional statements without a boolean comparison operation. Empty strings and the number 0 are falsy , and all other strings and numbers are truthy . Here's an example of a falsy value: username = \"\" if username : print ( f \"Hello, { username } !\" ) else : print ( \"The username is blank\" ) Example Output: The username is blank Here's an example of a truthy value: num_bananas = 2 if num_bananas : print ( \"We have bananas!\" ) else : print ( \"We have no bananas!\" ) Example Output: We have bananas!","title":"Truthy and falsy values"},{"location":"python/python-language/#float","text":"The float data type represents a decimal number: total_cost = 29.99","title":"float"},{"location":"python/python-language/#int","text":"The int data type represents a whole number: num_tacos_eaten = 12","title":"int"},{"location":"python/python-language/#converting-str-to-int","text":"You can use the int() function to convert a str to an int : age = int ( \"13\" ) This is often combined with the input() function when you prompt the user for a numeric data type: age = int ( input ( \"How old are you? \" ))","title":"Converting str to int"},{"location":"python/python-language/#str","text":"The str data type represents a text value: name = \"Daniel\"","title":"str"},{"location":"python/python-language/#string-concatenation","text":"If you need to combine a variable and a str , you can use the + operator. This technique is called string concatenation : name = \"Daniel\" greeting = \"Hello, \" + name print ( greeting ) # Hello, Daniel","title":"String concatenation"},{"location":"python/python-language/#string-interpolation","text":"Another way to combine a variable and a str is using f-strings . This technique is called string interpolation , and it is the preferred way to combine variables and str : name = \"Daniel\" age = 35 print ( f \"I'm { name } and I'm { age } years old.\" ) Example Output: I'm Daniel and I'm 35 years old.","title":"String interpolation"},{"location":"python/python-language/#multiline-strings","text":"Multiline strings allow you to write large blocks of text in a single print() statement: menu = \"\"\" Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now* \"\"\" print ( menu ) Example Output: Welcome to Dan's Taco Stand! Tacos $2 Burritos $5 Nachos $3 Place your order by clicking *Order Now*","title":"Multiline strings"},{"location":"python/python-language/#removing-the-intial-newline-of-a-multiline-string","text":"You can remove the initial newline from a multiline string using the \\ character: options = \"\"\" \\ (1) View All Contacts (2) View Contact (3) Add Contact (4) Update Contact (5) Remove Contact (6) Exit \"\"\" print ( options ) Example Output: (1) View All Contacts (2) View Contact (3) Add Contact (4) Update Contact (5) Remove Contact (6) Exit","title":"Removing the intial newline of a multiline string"},{"location":"python/python-language/#raw-strings","text":"Raw strings ( str prefaced with an r ) tell Python to not interpret special str characters. You use them in CWHQ courses to print ASCII art and ensure it formats correctly. Generally, r strings will also be multiline strings, but this isn't required: mr_nibbles = r \"\"\" |\\---/| | o_o | \\_^_/ \"\"\" print ( mr_nibbles ) Example Output: |\\---/| | o_o | \\_^_/","title":"Raw strings"},{"location":"python/python-language/#getting-the-number-of-characters-in-a-str","text":"You can use the len() function to get the number of characters in a str : name = \"Daniel\" len ( name ) # 6","title":"Getting the number of characters in a str"},{"location":"python/python-language/#checking-if-a-str-ends-with-a-set-of-characters","text":"The str.endswith() method lets you check if a str ends with a given pattern: email_addresses = [ \"djs@cwhq.com\" , \"alecg@auburn.edu\" , \"samh@bridges.com\" ] for email_address in email_addresses : if email_address . endswith ( \".edu\" ): print ( f \" { email_address } is a school address\" ) elif email_address . endswith ( \"cwhq.com\" ): print ( f \" { email_address } is a CWHQ employee address\" ) else : print ( f \"I don't know what { email_address } is for\" ) Example Output: djs@cwhq.com is a CWHQ employee address alecg@auburn.edu is a school address I don't know what sam@bridges.com is for","title":"Checking if a str ends with a set of characters"},{"location":"python/python-language/#sanitizing-user-input","text":"User's do strange things, but using str.lower() and str.strip() can help your program to validate str data types. str.lower() makes a str lowercase: # Imagine a user entered \"Pizza\" with an uppercase P favorite_food = \"Pizza\" if favorite_food . lower () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! str.strip() removes leading or trailing whitespace from a str : # Imagine a user entered \" pizza\" with a leading space character favorite_food = \" pizza\" if favorite_food . strip () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food! You can chain these methods together to sanitize a str completely: # What a mess! Extra spaces before/after and odd capitalization favorite_food = \" PIzZa \" if favorite_food . strip () . lower () == \"pizza\" : print ( \"That's my favorite food!\" ) Example Output: That's my favorite food!","title":"Sanitizing user input"},{"location":"python/python-language/#further-reading_2","text":"The Python Library Reference - Text Sequence Type The Python Library Reference - Numeric Types The Python Tutorial - Strings Think Python - Values and Types Think Python - Strings Real Python - Python 3's f-Strings Real Python - Strings and Character Data in Python","title":"Further reading"},{"location":"python/python-language/#data-structures","text":"Data structures allow you to efficiently store and access groups of items. Think of them like different storage containers you may use around the house.","title":"Data Structures"},{"location":"python/python-language/#list","text":"The list data structure is used to store data in ordered slots . It is known as mutable sequence type , which means it can be modified after creation. Usually, the items in a list are homogeneous, which means they represent a group of similar items of the same data type: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] menu_prices = [ 4.50 , 5.75 , 3.00 ] ids = [ 184 , 294 , 832 , 98 , 4 ] You can write a list on multiple lines if you want. The trailing comma is recommended but not required: foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"ice cream\" , \"asparagus\" , ]","title":"list"},{"location":"python/python-language/#accessing-items-in-a-list","text":"You can access individual items in a list using the [] characters and the index number of the item. The index numbers start at 0: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( names [ 0 ]) # alecg print ( names [ 1 ]) # danielj print ( names [ 2 ]) # dimas","title":"Accessing items in a list"},{"location":"python/python-language/#adding-an-item-to-a-list","text":"To add an item to a list after it has been created, you can use the list.append() method. The list.append() method adds the item to the end of the list: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . append ( \"samh\" ) print ( names ) # ['alecg', 'danielj', 'dimas', 'samh']","title":"Adding an item to a list"},{"location":"python/python-language/#updating-an-item-in-a-list","text":"To update a list item, replace the value at the index: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names [ 1 ] = \"django\" print ( names ) # ['alecg', 'django', 'dimas']","title":"Updating an item in a list"},{"location":"python/python-language/#removing-an-item-from-a-list","text":"To remove an item from a list , you can use the list.remove() method: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . remove ( \"alecg\" ) print ( names ) # ['danielj', 'dimas'] If you want to remove an item from a list by its index number, use the list.pop() method: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] names . pop ( 0 ) print ( names ) # ['danielj', 'dimas']","title":"Removing an item from a list"},{"location":"python/python-language/#looping-through-a-list","text":"To loop through the items in a list , use a for loop. Note the convention of using the plural names for the list and the singular name for the loop-iteration variable: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( \"This documentation is brought to you by:\" ) for name in names : print ( name ) Example Output: This documentation is brought to you by: alecg danielj dimas","title":"Looping through a list"},{"location":"python/python-language/#getting-the-number-of-items-in-a-list","text":"To get the number of items in a list , use the len() function: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] num_names = len ( names ) print ( num_names ) # 3","title":"Getting the number of items in a list"},{"location":"python/python-language/#checking-if-an-item-is-contained-in-a-list","text":"To check if an item is contained in a list , use the in operator: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] \"alecg\" in names # True \"samh\" in names # False The in operator is generally used as part of a conditional statement: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] if \"alecg\" in names : print ( \"alecg is in the 'names' list\" ) else : print ( \"alecg is NOT in the 'names' list\" ) if \"samh\" in names : print ( \"samh is in the 'names' list\" ) else : print ( \"samh is NOT in the 'names' list\" ) Example Output: alecg is in the 'names' list samh is NOT in the 'names' list","title":"Checking if an item is contained in a list"},{"location":"python/python-language/#further-reading_3","text":"The Python Library Reference - Common Sequence Operations The Python Library Reference - Mutable Sequence Types The Python Library Reference - len() The Python Tutorial - Lists Think Python - Lists","title":"Further reading"},{"location":"python/python-language/#dict","text":"The dict data structure is used to store data in key/value pairs: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } You can use the dict() function to build a dict as well, note that the keys are keyword arguments: staff = dict ( danielj = \"Curriculum Developer\" , alecg = \"Curriculum Instructor\" , dimas = \"Designer\" , )","title":"dict"},{"location":"python/python-language/#accessing-items-in-a-dict","text":"You have to know the key to access an individual item in a dict : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } daniel_job = staff [ \"danielj\" ] print ( f \"Daniel is a { daniel_job } .\" ) # Daniel is a Curriculum Developer. alec_job = staff [ \"alecg\" ] print ( f \"Alec is a { alec_job } .\" ) # Alec is a Curriculum Instructor. dima_job = staff [ \"dimas\" ] print ( f \"Dima is a { dima_job } .\" ) # Dima is a Designer. If you need to pull a value from a dict inside an f-string , you must use different quote characters for the key (if it's a str ). students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } print ( f \"Vicki is in { students [ 'Vicki' ] } \" ) # Vicki is in 3rd grade print ( f \"Sam is in { students [ 'Sam' ] } \" ) # Sam is in 4th grade print ( f \"Tammy is in { students [ 'Tammy' ] } \" ) # Tammy is in 4th grade","title":"Accessing items in a dict"},{"location":"python/python-language/#adding-an-item-to-a-dict","text":"You can add an item to a dict by providing the key/value pair (it's the same syntax as updating an item): staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff [ \"django\" ] = \"Director Of Pug Snorts\" print ( staff ) # {'danielj': 'Curriculum Developer', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer', 'django': 'Director Of Pug Snorts'}","title":"Adding an item to a dict"},{"location":"python/python-language/#updating-an-item-in-a-dict","text":"To update an item in a dict , you must know the key: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff [ \"danielj\" ] = \"Burrito Taste-Tester\" print ( staff ) # {'danielj': 'Burrito Taste-Tester', 'alecg': 'Curriculum Instructor', 'dimas': 'Designer'}","title":"Updating an item in a dict"},{"location":"python/python-language/#removing-an-item-from-a-dict","text":"To remove an item from a dict , use the dict.pop() method: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } staff . pop ( \"danielj\" ) print ( staff ) # {'alecg': 'Curriculum Instructor', 'dimas': 'Designer'}","title":"Removing an item from a dict"},{"location":"python/python-language/#looping-through-a-dict","text":"To loop through a dict , you generally use the dict.items() method like this: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } for name , job in staff . items (): print ( f \" { name } is a { job } .\" ) Example Output: danielj is a Curriculum Developer. alecg is a Curriculum Instructor. dimas is a Designer. If you just want to loop over the keys of a dict , you can use a for loop just as you would with a list : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } print ( \"CWHQ staff:\" ) for name in staff : print ( name ) Example Output: danielj alecg dimas","title":"Looping through a dict"},{"location":"python/python-language/#getting-the-keys-from-a-dict","text":"If you need to get all of the keys from a dict , use the dict.keys() method. Note, you'll usually want to cast the result to a list , which is why the list() function is used here: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } names = list ( staff . keys ()) print ( f \"Here are all the names in the staff dict: { names } \" ) Example Output: Here are all the names in the staff dict: ['danielj', 'alecg', 'dimas']","title":"Getting the keys from a dict"},{"location":"python/python-language/#getting-the-values-from-a-dict","text":"If you need to get all of the values from a dict , use the dict.values() method. Note, you'll usually want to cast the result to a list , which is why the list() function is used here: staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } jobs = list ( staff . values ()) print ( f \"Here are all the jobs in the staff dict: { jobs } \" ) Example Output: Here are all the jobs in the staff dict: ['Curriculum Developer', 'Curriculum Instructor', 'Designer']","title":"Getting the values from a dict"},{"location":"python/python-language/#getting-the-number-of-items-in-a-dict","text":"You can use the len() function to get the number of items in a dict : staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } number_of_staff = len ( staff ) print ( f \"We have { number_of_staff } people on our staff.\" ) # We have 3 people on our staff.","title":"Getting the number of items in a dict"},{"location":"python/python-language/#checking-if-an-item-is-contained-in-a-dict","text":"To check if an item is contained in a dict , use the in operator: students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if \"Vicki\" in students : print ( \"Vicki is a student here\" ) Example Output: Vicki is a student here You can use the not operator before the in operator to test if a key is not in a dict : students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if \"Daniel\" not in students : print ( \"Daniel is NOT a student here\" ) Example Output: Daniel is NOT a student here","title":"Checking if an item is contained in a dict"},{"location":"python/python-language/#using-dictget-to-test-if-an-item-is-in-a-dict","text":"The dict.get() method can be used as an alternative to in and not in . It returns the value of the given key or the special None value, which is used to indicate the absence of any valid value. The is operator is similar to == , but it checks if the two values are the same exact thing in memory: students = { \"Vicki\" : \"3rd grade\" , \"Sam\" : \"4th grade\" , \"Tammy\" : \"4th grade\" , } if students . get ( \"Vicki\" ) is not None : print ( \"Vicki is a student here\" ) if students . get ( \"Daniel\" ) is None : print ( \"Daniel is NOT a student here\" ) Example Output: Vicki is a student here Daniel is NOT a student here","title":"Using dict.get() to test if an item is in a dict"},{"location":"python/python-language/#further-reading_4","text":"Real Python - Dictionaries in Python The Python Library Reference - Mapping Types: dict The Python Tutorial - Dictionaries Think Python - Dictionaries","title":"Further reading"},{"location":"python/python-language/#functions","text":"Functions allow you to group related statements together to perform a task. They help to implement the D.R.Y. (Don't Repeat Yourself) principle because they reduce unnecessary repetition.","title":"Functions"},{"location":"python/python-language/#built-in-functions","text":"Python comes with many built-in functions. We'll cover some of the most common that you'll see in CodeWizardsHQ courses below.","title":"Built-in functions"},{"location":"python/python-language/#float_1","text":"The float() function converts data to a float : pi = float ( \"3.14\" ) print ( pi ) # 3.14 type ( pi ) # <class 'float'> two = float ( 2 ) print ( two ) # 2.0 type ( two ) # <class 'float'>","title":"float()"},{"location":"python/python-language/#input","text":"The input() function allows you to prompt a user. The user's response is returned as a str , which you can store in a variable: name = input ( \"What is your name? \" ) print ( f \"Nice to meet you, { name } !\" ) Example Output: What is your name? Daniel Nice to meet you, Daniel!","title":"input()"},{"location":"python/python-language/#int_1","text":"The int() function converts data to an int : int_pi = int ( 3.14 ) print ( int_pi ) # 3 type ( int_pi ) # <class 'int'> meaning_of_life = int ( \"42\" ) print ( meaning_of_life ) # 42 type ( meaning_of_life ) # <class 'int'>","title":"int()"},{"location":"python/python-language/#len","text":"The len() function returns the length of a sequence such as a list or str : number_of_characters = len ( \"How many characters are in this str?\" ) print ( number_of_characters ) # 36 favorite_foods = [ \"tacos\" , \"pizza\" , \"nachos\" , \"burritos\" ] number_of_foods = len ( favorite_foods ) print ( number_of_foods ) # 4","title":"len()"},{"location":"python/python-language/#list_1","text":"The list() function creates a list from a sequence such as the result of dict.keys() , dict.values() , or a str : character_list = list ( \"Hello!\" ) print ( character_list ) # ['H', 'e', 'l', 'l', 'o', '!'] staff = { \"danielj\" : \"Curriculum Developer\" , \"alecg\" : \"Curriculum Instructor\" , \"dimas\" : \"Designer\" , } names = list ( staff . keys ()) print ( names ) # ['danielj', 'alecg', 'dimas'] jobs = list ( staff . values ()) print ( jobs ) # ['Curriculum Developer', 'Curriculum Instructor', 'Designer']","title":"list()"},{"location":"python/python-language/#print","text":"The print() function displays text on the screen: print ( \"Hello, world!\" ) # Hello, world!","title":"print()"},{"location":"python/python-language/#using-special-characters-with-print","text":"You can use special characters such as \\n and \\t to format the text a bit. The \\n adds a newline (like hitting enter on your keyboard) and the \\t adds a tab: print ( \"Line 1 \\n Line 2 \\n Line 3 \\n \" ) print ( \" \\t This is tabbed over \\n\\t This too.\" ) Example Output: Line 1 Line 2 Line 3 This is tabbed over This too.","title":"Using special characters with print()"},{"location":"python/python-language/#using-the-splat-operator-to-print-a-list","text":"You an use the splat ( * ) operator to print the items of a list : names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( * names ) # alecg danielj dimas","title":"Using the splat (*) operator to print a list"},{"location":"python/python-language/#using-the-sep-parameter","text":"The sep parameter of print() let's you specifiy a given separator to add between each item passed to print() . It is commonly used in combination with the splat ( * ) operator to print the items of a list with a given separator between each item: names = [ \"alecg\" , \"danielj\" , \"dimas\" ] print ( * names , sep = \" -- \" ) # alecg -- danielj -- dimas","title":"Using the sep parameter"},{"location":"python/python-language/#range","text":"The range() function is mainly used for counter-controlled repetition with a for loop: for num in range ( 1 , 4 ): print ( f \" { num } potato\" ) Example Output: 1 potato 2 potato 3 potato Note that the last number is 3 in the example above, not 4!","title":"range()"},{"location":"python/python-language/#using-the-step-parameter-of-the-range-function","text":"The range() function takes a third argument, step , which allows you to generate sequences of numbers separated by a given step: for num in range ( 1 , 11 , 3 ): print ( num ) Example Output: 1 4 7 10","title":"Using the step parameter of the range() function"},{"location":"python/python-language/#sorted","text":"The sorted() function is used to sort a list : names = [ \"danielj\" , \"alecg\" , \"dimas\" ] sorted_names = sorted ( names ) print ( sorted_names ) # ['alecg', 'danielj', 'dimas'] You can pass keyword arguments to the sorted() function to customize the way the list is sorted. For example, the key argument can be a function to run on each item of the list before sorting: names = [ \"Danielj\" , \"alecg\" , \"Dimas\" ] sorted_names = sorted ( names ) # Notice how these aren't sorted correctly? Uppercase letters are \"smaller\" # than lowercase letters in the sorting algorithm that `sort()` uses! print ( sorted_names ) # ['Danielj', 'Dimas', 'alecg'] sorted_names = sorted ( names , key = str . lower ) # Now, everything is sorted correctly, and the original values haven't been # changed. `sort()` only uses the `key` function during the sorting process. print ( sorted_names ) # ['alecg', 'Danielj', 'Dimas'] The reverse keyword argument of sort() is used to sort from high-to-low instead of low-to-high. It expects a bool value: names = [ \"danielj\" , \"alecg\" , \"dimas\" ] reverse_sorted_names = sorted ( names , reverse = True ) print ( reverse_sorted_names ) # ['dimas', 'danielj', 'alecg']","title":"sorted()"},{"location":"python/python-language/#str_1","text":"The str() function turns its argument into a str data type. This comes in handy if you have a number but want to treat it like a str : meaning_of_life = 42 print ( \"The meaning of life is \" + str ( meaning_of_life )) Example Output: The meaning of life is 42 If you use f-strings , you don't have to worry about converting numbers to str when working with str data: meaning_of_life = 42 print ( f \"The meaning of life is { meaning_of_life } \" ) Example Output: The meaning of life is 42","title":"str()"},{"location":"python/python-language/#further-reading_5","text":"The Python Library Reference - Built-in Functions","title":"Further reading"},{"location":"python/python-language/#user-defined-functions","text":"You define a function using the def keyword, and function definitions go at the TOP of your file: def say_hello (): print ( \"Hello!\" )","title":"User-defined functions"},{"location":"python/python-language/#calling-a-function","text":"Defining a function does not run the statements in the body of the function. To run a function, you call it like this: def say_hello (): print ( \"Hello!\" ) say_hello () # Hello!","title":"Calling a function"},{"location":"python/python-language/#adding-parameters-to-a-function","text":"When you define a function, you can add parameters that the function caller should pass in. Parameters are like variables, but the value of the variable is set by the function caller, not the function definer: def say_hello ( name ): print ( f \"Hello, { name } !\" )","title":"Adding parameters to a function"},{"location":"python/python-language/#passing-arguments-to-a-function","text":"If a function accepts parameters, you need to pass them in when you call the function. The values you pass to the function are called the arguments to the function: def say_hello ( name ): print ( f \"Hello, { name } !\" ) say_hello ( \"Daniel\" ) # Hello, Daniel!","title":"Passing arguments to a function"},{"location":"python/python-language/#returning-a-value-from-a-function","text":"You can return a value from a function by using the return keyword: def add ( number_1 , number_2 ): total = number_1 + number_2 return total","title":"Returning a value from a function"},{"location":"python/python-language/#capturing-a-functions-return-value","text":"If a function returns a value, you can capture it in a varible: def add ( number_1 , number_2 ): total = number_1 + number_2 return total total = add ( 2 , 3 ) print ( total ) # 5 You can also use the value immediately in another function, like print() : def add ( number_1 , number_2 ): total = number_1 + number_2 return total print ( add ( 2 , 3 )) # 5 print ( f \"2 + 3 = { add ( 2 , 3 ) } \" ) # 2 + 3 = 5","title":"Capturing a function's return value"},{"location":"python/python-language/#indentation-in-functions","text":"The base-level of indentation in a function is 4 spaces. If you have another statement inside your function that also requires indentation (like a conditional statement or loop), you need to indent the body of that statement by 4 more spaces: def say_hello ( name ): print ( f \"Hello, { name } !\" ) if name == \"Daniel\" : print ( \"That's a cool name!\" ) else : print ( \"Nice to meet you!\" ) say_hello ( \"Daniel\" ) say_hello ( \"Alec\" ) Example Output: Hello, Daniel! That's a cool name! Hello, Alec! Nice to meet you!","title":"Indentation in functions"},{"location":"python/python-language/#using-an-early-return-statement-to-exit-a-function","text":"A return statement can be used to exit a function. This is normally used when you want to verify (with a conditional statement) that some preconditions are valid before continuing to execute a function body: def greet_codewizard ( name ): if name not in [ \"danielj\" , \"alecg\" , \"dimas\" ]: print ( \"I don't know you!\" ) return print ( f \"Hello, { name } !\" ) greet_codewizard ( \"danielj\" ) # Hello, danielj! greet_codewizard ( \"django\" ) # I don't know you!","title":"Using an early return statement to exit a function"},{"location":"python/python-language/#further-reading_6","text":"Real Python - Defining Your Own Python Function The Python Tutorial - Defining Functions Think Python - Functions Think Python - Fruitful Functions","title":"Further reading"},{"location":"python/python-language/#loops","text":"If you need to repeat something in your programs, you'll need to use one of Python's looping mechanisms.","title":"Loops"},{"location":"python/python-language/#for","text":"A for loop is generally used to loop over a sequence, such as a list : fruits = [ \"apple\" , \"banana\" , \"cherry\" ] for fruit in fruits : print ( fruit ) Example Output: apple banana cherry You can also use a for loop to loop over the characters in a str : name = \"Daniel\" for letter in name : print ( letter ) Example Output: D a n i e l","title":"for"},{"location":"python/python-language/#counter-controlled-repetition","text":"You can combine the range() function and the for loop to create a counter-controlled loop: for num in range ( 1 , 4 ): print ( f \" { num } potato\" ) Example Output: 1 potato 2 potato 3 potato","title":"Counter-controlled repetition"},{"location":"python/python-language/#searching-for-a-value-in-a-for-loop","text":"You can use a conditional statement inside a for loop to search for a particular item in a list and then do something. Note the indentation: fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ] for fruit in fruits : if fruit == \"orange\" : print ( f \" { fruit } is the best fruit\" ) Example Output: orange is the best fruit","title":"Searching for a value in a for loop"},{"location":"python/python-language/#finding-a-value-in-a-for-loop-to-use-after-the-loop-finishes","text":"You can store an item from the for loop for later use by creating a variable before the for loop with some default value. fruits = [ \"orange\" , \"banana\" , \"cherry\" , \"apple\" ] # The best_fruit will be a str, so the empty str is a good default. best_fruit = \"\" for fruit in fruits : if fruit == \"orange\" : best_fruit = fruit # The best fruit is orange. print ( f \"The best fruit is { best_fruit } .\" )","title":"Finding a value in a for loop to use after the loop finishes"},{"location":"python/python-language/#creating-a-new-list-in-a-for-loop","text":"Often, you'll want to loop through a list and build a new list from the contents of the original list . This technique is called mapping, and it's a common thing to do with lists and for loops: prices = [ 10 , 12 , 5 , 8 ] discounted_prices = [] for price in prices : discounted_price = price - ( price * .10 ) discounted_prices . append ( discounted_price ) # Here are your discounted prices:[9, 10.8, 4.5, 7.2] print ( f \"Here are your discounted prices: { discounted_prices } \" )","title":"Creating a new list in a for loop"},{"location":"python/python-language/#creating-a-list-of-a-pre-determined-size-with-a-for-loop","text":"Using a for loop and the range() function, you can fill a list to a pre-determined size: fruits = [] for num in range ( 1 , 5 ): fruit = input ( f \"Enter fruit number { num } : \" ) fruits . append ( fruit ) Example Output: Enter fruit number 1: apples Enter fruit number 2: bananas Enter fruit number 3: oranges Enter fruit number 4: kiwi","title":"Creating a list of a pre-determined size with a for loop"},{"location":"python/python-language/#further-reading_7","text":"Real Python - Python for Loops The Python Tutorial - for Statements The Python Tutorial - The range() function Think Python - Traversal with a for loop","title":"Further reading"},{"location":"python/python-language/#while","text":"A while loop is generally used to perform indefinite repetition (when you don't know how many times you want to loop). For example, you can use a while loop to ask a user something until they answer correctly: keep_looping = True # This variable controls whether we loop or not. while keep_looping : user_guess = input ( \"What is the meaning of life? \" ) if user_guess == \"42\" : print ( \"That's correct!\" ) keep_looping = False # Stops the loop. else : print ( \"That's incorrect! Please try again.\" ) Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct!","title":"while"},{"location":"python/python-language/#using-break-to-exit-a-loop","text":"You can also use a break statement instead of using a variable to control how many times an indefinite while loop runs: while True : user_guess = input ( \"What is the meaning of life? \" ) if user_guess == \"42\" : print ( \"That's correct!\" ) break # Stops the loop. else : print ( \"That's incorrect! Please try again.\" ) Example Output: What is the meaning of life? To make money That's incorrect! Please try again. What is the meaning of life? To eat tacos That's incorrect! Please try again. What is the meaning of life? 42 That's correct!","title":"Using break to exit a loop"},{"location":"python/python-language/#counter-controlled-repetition_1","text":"You can use a while loop to perform counter-controlled repetition as well, but the for loop with the range() function is generally preferred: counter = 0 while counter < 5 : print ( counter ) counter += 1 # If you forget this, you'll have an infinite loop! Example Output: 0 1 2 3 4","title":"Counter-controlled repetition"},{"location":"python/python-language/#further-reading_8","text":"Real Python - Python while Loops Think Python - The while statement","title":"Further reading"},{"location":"python/python-language/#math-operations","text":"Python is used heavily in math-related fields, so there are a large suite of tools for performing mathematical operations built-in to the language.","title":"Math Operations"},{"location":"python/python-language/#arithmetic-operators","text":"The four basic arithmetic operations (addition, subtraction, multiplication, division) are similar to how you would use them with calculator: total = 8 + 2 difference = 8 - 2 product = 8 * 2 quotient = 8 / 2 print ( f \"8 + 2 = { total } \" ) # 8 + 2 = 10 print ( f \"8 - 2 = { difference } \" ) # 8 - 2 = 6 print ( f \"8 * 2 = { product } \" ) # 8 * 2 = 16 print ( f \"8 / 2 = { quotient } \" ) # 8 / 2 = 4.0 Note that in the example above, division always produces a float .","title":"Arithmetic Operators"},{"location":"python/python-language/#arithmetic-only-works-between-numbers","text":"Both data types must be numeric data types, you cannot perform arithmetic between a str and a number. num_tacos = 2 + \"1\" # no num_tacos = \"2\" + \"1\" # no num_tacos = \"1\" * 3 # no num_tacos = \"1\" * \"3\" # no","title":"Arithmetic only works between numbers"},{"location":"python/python-language/#other-operators","text":"There are a few other common operators that Pythonistas use when performing math in Python.","title":"Other Operators"},{"location":"python/python-language/#modulo","text":"The modulo operator ( % ) returns the remainder after division: 10 % 3 # 1","title":"Modulo"},{"location":"python/python-language/#power","text":"The power operator ( ** ) multiplies a number by itself a given number of times: 3 ** 2 # 9","title":"Power"},{"location":"python/python-language/#floor-division","text":"The floor division operator ( // ) removes any fractional portion after divison: 10 // 3 # 3","title":"Floor division"},{"location":"python/python-language/#further-reading_9","text":"The Python Tutorial - Numbers Real Python - Numbers in Python","title":"Further reading"},{"location":"python/python-language/#modules","text":"Python is often called a batteries-included language because of the plethora of built-in modules that the language contains. Modules are just Python files full of functionality that you don't have to write yourself; you merely import the things you want from a module and use them in your programs.","title":"Modules"},{"location":"python/python-language/#getting-access-to-functions-in-modules","text":"To get a function from a module, you import it. There are several different types of imports, which we'll briefly cover below.","title":"Getting access to functions in modules"},{"location":"python/python-language/#importing-a-single-function","text":"To import a single function, just write the function name (without parentheses) after the import keyword: from module_name import function_name","title":"Importing a single function"},{"location":"python/python-language/#importing-multiple-functions","text":"If you need to import multiple functions from a module, separate them by commas: from module_name import some_function , some_other_function","title":"Importing multiple functions"},{"location":"python/python-language/#importing-all-functions","text":"To import all items from a module (not recommended generally, but we do this in some courses like E24 and M11), use the * import syntax: from module_name import *","title":"Importing all functions"},{"location":"python/python-language/#renaming-imported-functions","text":"Sometimes, its nice to rename a function you import from a module (like when the function name is really long or confusing). You can do this using the as keyword: from module_name import some_really_long_function_name as short_name","title":"Renaming imported functions"},{"location":"python/python-language/#further-reading_10","text":"The Python Library Reference The Python Tutorial - Modules Real Python - Python Modules and Packages","title":"Further reading"},{"location":"python/python-language/#built-in-modules","text":"Python comes with 100s of built-in modules. We'll briefly cover a few that are used often at CWHQ in this section. See the Further Reading section for details on where you can browse all of Python's built-in modules.","title":"Built-in modules"},{"location":"python/python-language/#random","text":"The random module is used to add randomness to your programs.","title":"random"},{"location":"python/python-language/#getting-a-random-integer","text":"You use the randint() function to get a random integer between two numbers: from random import randint # Get an integer between 1 and 10 random_integer = randint ( 1 , 10 ) print ( random_integer ) # 3","title":"Getting a random integer"},{"location":"python/python-language/#getting-a-random-value-from-a-sequence","text":"You use the choice() function to get a random value from a sequence ( str , list , or tuple ): from random import choice names = [ \"daniel\" , \"alec\" , \"dima\" ] random_name = choice ( names ) print ( random_name ) # dima","title":"Getting a random value from a sequence"},{"location":"python/python-language/#further-reading_11","text":"The Python Standard Library The Python Standard Library - random","title":"Further reading"},{"location":"python/python-language/#the-pass-statement","text":"You use the pass statement to act as a placeholder in a conditional statement or function definition. Programmers refer to this as \"stubbing-out\" the code block. No logic will run in the block a pass statement appears in. Python needs the pass statement because you can't have empty function or conditional blocks.","title":"The pass statement"},{"location":"python/python-language/#using-pass-in-a-function","text":"The pass statement can be used in a function definition as a placeholder before you write the main logic. This ensures your program still works but gives you a convenient way to see that you still need to implement some logic: def order_pizza (): pass","title":"Using pass in a function"},{"location":"python/python-language/#using-pass-in-a-conditional-statement","text":"The pass statement can also be used in a conditioal statement. This comes in handy if you know that you need a conditional statement but you don't have any of the logic ready yet: action = input ( \"What do you want to do? \" ) if action == \"Order Pizza\" : order_pizza () elif action == \"Order Tacos\" : pass","title":"Using pass in a conditional statement"},{"location":"python/python-language/#variables","text":"Variables assign a name to a value. The naming convention in Python is to use snake_case for variable names, and UPPER_SNAKE_CASE for named constants.","title":"Variables"},{"location":"python/python-language/#creating-a-variable","text":"You create a variable by assigning a name to a value using the assignment operator ( = ): my_name = \"Daniel\" my_age = 35","title":"Creating a variable"},{"location":"python/python-language/#creating-a-named-constant","text":"Named constants can replace magic numbers in your program. For example, what does 1 and 2 represent here? if user_choice == 1 : # Do something cool... elif user_choice == 2 : # Do another cool thing... 1 and 2 in the example above are magic numbers because we would have to hunt down their meaning by reading more of the program. If we instead create a named constant for each, the meaning is clearer: ORDER_TACOS = 1 ORDER_PIZZA = 2 if user_choice == ORDER_TACOS : # Order tacos... elif user_choice == ORDER_PIZZA : # Order pizza","title":"Creating a named constant"},{"location":"python/python-language/#updating-the-value-of-a-variable","text":"You can update the value stored in a variable like this: score = 0 score = score + 1 # 0 + 1 print ( score ) # 1 score = score + 1 # 1 + 1 print ( score ) # 2 The same works for decreasing the value of a variable: score = 3 score = score - 1 # 3 - 1 print ( score ) # 2 score = score - 1 # 2 - 1 print ( score ) # 1 There's also a shorthand notation: score = 0 score += 1 # 0 + 1 print ( score ) # 1 score += 1 # 1 + 1 print ( score ) # 2 score -= 1 # 2 - 1 print ( score ) # 1 score -= 1 # 1 - 1 print ( score ) # 0","title":"Updating the value of a variable"},{"location":"python/python-language/#global-variables","text":"Any variable created outside of function definition is considered a global variable. If you want to modify a global variable from inside a function definition, you need to use the global keyword: # This is a global variable score = 0 def update_score (): # Must do this to modify the variable global score # Now this is OK score = score + 1 # 1","title":"Global variables"},{"location":"python/python-language/#further-reading_12","text":"Real Python - Variables in Python Think Python - Variables, expressions and statements","title":"Further reading"},{"location":"python/wizardlib/","text":"Wizardlib \u00b6 Here, you'll find the documentation for CodeWizardHQ's Wizardlib Python library. We use this library in the following courses: Elementary Middle School Python Game Development Introduction to Programming with Python add_audio() \u00b6 Adds an audio file. Function signature: add_audio ( filename ) Parameters: filename ( str ) : The filename. Returns: The audio element. Example usage: audio_element = add_audio ( \"never-gonna-give-you-up.mp3\" ) add_background() \u00b6 Adds a background image. Function signature: add_background ( filename ) Parameters: filename ( str ): The filename. Example usage: add_background ( \"flying-cats.png\" ) Example output: add_background_audio() \u00b6 Adds background audio which plays when you click the Start button. Function signature: add_background_audio ( filename ) Parameters: filename ( str ): The filename. Example usage: add_background_audio ( \"never-gonna-give-you-up.mp3\" ) add_button() \u00b6 Adds a button. Function signature: add_button ( text ) Parameters: text ( str ): The text on the button. Returns: The button element. Example usage: button = add_button ( \"Click Me\" ) Example output: add_image() \u00b6 Adds an image to the page. Function signature: add_image ( filename , size ) Parameters: filename ( str ): The filename. size ( int ): The size, in pixels (optional). Returns: The image element. Example usage: taco_image = add_image ( \"taco.png\" ) Example output: add_text() \u00b6 Adds text to the page. Function signature: add_text ( text , size ) Parameters: text ( str ): The text to add to the page. size ( int ): The size, in pixels (optional, defaults to 18). Returns: The text element. Example usage: wizardlib_text = add_text ( \"Wizardlib is cool!\" ) Example output: add_text_input() \u00b6 Adds a text input to the page. Function signature: add_text_input ( placeholder ) Parameters: placeholder ( str ): The text to display in the input box. Returns: The text input element. Example usage: text_input = add_text_input ( \"Enter your password:\" ) Example output: animate_down() \u00b6 Animates the element down by the given distance . Can optionally change the amount of time the animation takes and whether the element animates down and up repeatedly. Function signature: animate_down ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate down and up (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_down ( taco_image , 100 ) Example output: animate_left() \u00b6 Animates the element left by the given distance . Can optionally change the amount of time the animation takes and whether the element animates left and right repeatedly. Function signature: animate_left ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate left and right (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_left ( taco_image , 100 ) Example output: animate_right() \u00b6 Animates the element right by the given distance . Can optionally change the amount of time the animation takes and whether the element animates right and left repeatedly. Function signature: animate_right ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate right and left (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_right ( taco_image , 100 ) Example output: animate_up() \u00b6 Animates the element up by the given distance . Can optionally change the amount of time the animation takes and whether the element animates up and down repeatedly. Function signature: animate_up ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate up and down (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_up ( taco_image , 100 ) Example output: check_collision() \u00b6 If element1 and element2 collide, function_to_run is called. Function signature: check_collision ( element1 , element2 , function_to_run ) Parameters: element1 ( element ): An element to check for collisions with. element2 ( element ): An element to check for collisions with. function_to_run ( function ): The function to run if element1 hits element2 . Example usage: def cat_caught_taco (): clear () text = add_text ( \"The kitty caught the taco!\" ) position_element ( text , \"center\" , \"center\" ) def move ( key ): if key == \"w\" : move_up ( cat_image , 10 ) elif key == \"a\" : move_left ( cat_image , 10 ) elif key == \"s\" : move_down ( cat_image , 10 ) elif key == \"d\" : move_right ( cat_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) cat_image = add_image ( \"flying-cats.jpg\" , 100 ) position_element ( cat_image , 700 , 300 ) keydown ( move ) check_collision ( taco_image , cat_image , cat_caught_taco ) Example output: clear() \u00b6 Clear the page of all elements. Function signature: clear () Example usage: def clear_page (): clear () after_clear_text = add_text ( \"Page was cleared\" , 32 ) position_element ( after_clear_text , \"center\" , \"center\" ) before_clear_text = add_text ( \"This is on the page before clearing\" , 32 ) position_element ( before_clear_text , \"center\" , \"center\" ) clear_page_button = add_button ( \"Clear Page\" ) position_element ( clear_page_button , \"center\" , 400 ) click ( clear_page_button , clear_page ) Example output: click() \u00b6 Call function_to_run when element is clicked. Function signature: click ( element , function_to_run ) Parameters: element ( element ): The element to click. function_to_run ( function ): The function to run if element is clicked. Example usage: def show_text (): text = add_text ( \"Button was clicked!\" , 32 ) position_element ( text , \"center\" , \"center\" ) button = add_button ( \"Click Me\" ) position_element ( button , \"center\" , 400 ) click ( button , show_text ) Example output: fade_in() \u00b6 Fades the element from invisible to visible. Function signature: fade_in ( element ) Parameters: element ( element ): The element to fade in. Example usage: def fade_text_in (): fade_in ( hidden_text ) hidden_text = add_text ( \"Hidden Text\" , 32 ) position_element ( hidden_text , \"center\" , 400 ) fade_out ( hidden_text ) fade_in_button = add_button ( \"Fade In\" ) position_element ( fade_in_button , \"center\" , \"center\" ) click ( fade_in_button , fade_text_in ) Example output: fade_out() \u00b6 Fades the element from visible to invisible. Function signature: fade_out ( element ) Parameters: element ( element ): The element to fade out. Example usage: def fade_text_out (): fade_out ( text_to_hide ) text_to_hide = add_text ( \"Text To Hide\" , 32 ) position_element ( text_to_hide , \"center\" , 400 ) fade_out_button = add_button ( \"Fade Out\" ) position_element ( fade_out_button , \"center\" , \"center\" ) click ( fade_out_button , fade_text_out ) Example output: get_input_value() \u00b6 Gets the value of the input element . Function signature: get_input_value ( element ) Parameters: element ( element ): The element to get the value from. Example usage: def login (): password = get_input_value ( password_input ) clear () if password == \"secretpassword\" : logged_in_text = add_text ( \"You've logged in!\" , 32 ) position_element ( logged_in_text , \"center\" , 400 ) password_input = add_text_input ( \"Enter your password\" ) position_element ( password_input , \"center\" , 400 ) login_button = add_button ( \"Login\" ) position_element ( login_button , \"center\" , \"center\" ) click ( login_button , login ) Example output: keydown() \u00b6 Runs function_to_run when a key is pressed. The key that is pressed will be passed as the first argument to function_to_run and will always be lowercase. Function signature: keydown ( function_to_run ) Parameters: function_to_run ( function ): The function to run when a key is pressed. Example usage: def key_logger ( pressed_key ): update_text ( last_key_pressed_text , f \"Last key pressed: { pressed_key } \" ) last_key_pressed_text = add_text ( \"Last key pressed: \" , 32 ) position_element ( last_key_pressed_text , \"center\" , 400 ) keydown ( key_logger ) Example output: move_down() \u00b6 Moves the element down by the given distance . Function signature: move_down ( element , distance ) Parameters: element ( element ): The element to move down. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output: move_left() \u00b6 Moves the element left by the given distance . Function signature: move_left ( element , distance ) Parameters: element ( element ): The element to move left. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output: move_right() \u00b6 Moves the element right by the given distance . Function signature: move_right ( element , distance ) Parameters: element ( element ): The element to move right. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output: move_up() \u00b6 Moves the element up by the given distance . Function signature: move_up ( element , distance ) Parameters: element ( element ): The element to move up. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output: play_audio() \u00b6 Plays the audio that element represents. Function signature: play_audio ( element ) Parameters: element ( element ): The audio element to play. Example usage: laugh_audio = add_audio ( \"laugh.mp3\" ) play_audio ( laugh_audio ) position_element() \u00b6 Position the element at the given x and y position. The x and y arguments can be any int , or one of the position helpers: Position Helper1 Helper2 Helper3 x \"left\" \"center\" \"right\" y \"top\" \"center\" \"bottom\" Function signature: position_element ( element , x , y ) Parameters: element ( element ): The element to position. x ( int | str ): The desired x-position of the element . y ( int | str ): The desired y-position of the element . Example usage: taco_image = add_image ( \"taco.jpg\" ) position_element ( taco_image , \"center\" , 400 ) set_background_color() \u00b6 Sets the background color of the page to color . Function signature: set_background_color ( color ) Parameters: color ( str ): The desired background color. Example usage: set_background_color ( \"darksalmon\" ) Example output: set_element_width() \u00b6 Sets the element to the given width . Function signature: set_element_width ( element , width ) Parameters: element ( element ): The element to adjust. width ( int ): The desired width of the element . Example usage: def shrink_taco (): set_element_width ( taco_image , 100 ) shrink_taco_button = add_button ( \"Shrink Taco\" ) position_element ( shrink_taco_button , \"center\" , \"center\" ) taco_image = add_image ( \"taco.jpg\" , 300 ) position_element ( taco_image , \"center\" , 200 ) click ( shrink_taco_button , shrink_taco ) Example output: set_font_size() \u00b6 Sets the font size of the element to the given font_size . Function signature: set_font_size ( element , font_size ) Parameters: element ( element ): The element to adjust. font_size ( int ): The desired font_size of the element . Example usage: def shrink_text (): set_font_size ( text_element , 25 ) shrink_text_button = add_button ( \"Shrink Font\" ) position_element ( shrink_text_button , \"center\" , \"center\" ) text_element = add_text ( \"Shrink this text!\" , 100 ) position_element ( text_element , \"center\" , 300 ) click ( shrink_text_button , shrink_text ) Example output: set_text_color() \u00b6 Sets the color of the text_element . Function signature: set_text_color ( text_element , color ) Parameters: text_element ( element ): The text element to adjust. color ( str ): The desired color of the text_element . Example usage: red_text = add_text ( \"This text is red\" , 32 ) set_text_color ( red_text , \"red\" ) Example output: set_text_decoration() \u00b6 Sets the text decoration of the given text_element . Function signature: set_text_decoration ( text_element , decoration_string ) Parameters: text_element ( element ): The text element to adjust. decoration_string ( str ): The decoration string for the CSS property. Example usage: text_element = add_text ( \"Never Gonna Give You Up\" , 42 ) set_text_decoration ( text_element , \"underline dotted blue\" ) Example output: Read about different options for the decoration_string here set_timeout() \u00b6 Runs function_to_run after time seconds. Function signature: set_timeout ( function_to_run , time ) Parameters: function_to_run ( function ): The function to run. time ( int ): The time (in seconds) to wait before running the function_to_run . Example usage: def show_boo_text (): boo_text = add_text ( \"BOO!!!\" , 100 ) position_element ( boo_text , \"center\" , 300 ) set_timeout ( show_boo_text , 3 ) Example output: update_text() \u00b6 Changes the text in text_element to the new_text . Function signature: update_text ( text_element , new_text ) Parameters: text_element ( element ): The element to adjust. new_text ( str ): The new text for the text_element . Example usage: def update_text_element (): update_text ( text_element , \"Updated text\" ) text_element = add_text ( \"Original text\" , 32 ) position_element ( text_element , \"center\" , 400 ) update_text_button = add_button ( \"Update Text\" ) position_element ( update_text_button , \"center\" , \"center\" ) click ( update_text_button , update_text_element ) Example output: remove_element() \u00b6 Removes the element from the page. Function signature: remove_element ( element ) Parameters: element ( element ): The element to remove. Example usage: def remove_taco (): remove_element ( taco_image ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) remove_taco_button = add_button ( \"Remove Taco\" ) position_element ( remove_taco_button , \"center\" , \"center\" ) click ( remove_taco_button , remove_taco ) Example output: rotate_element() \u00b6 Rotates the element by the given number of degrees . Function signature: rotate_element ( element , degrees ) Parameters: element ( element ): The element to rotate. degrees ( int ): The number of degrees to rotate the element . Example usage: def rotate_taco (): rotate_element ( taco_image , 180 ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) rotate_taco_button = add_button ( \"Rotate Taco\" ) position_element ( rotate_taco_button , \"center\" , \"center\" ) click ( rotate_taco_button , rotate_taco ) Example output: vanish() \u00b6 Removes the element from the page over a 1 second interval. Function signature: vanish ( element ) Parameters: element ( element ): The element to remove. Example usage: def vanish_taco (): vanish ( taco_image ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) vanish_taco_button = add_button ( \"Vanish Taco\" ) position_element ( vanish_taco_button , \"center\" , \"center\" ) click ( vanish_taco_button , vanish_taco ) Example output:","title":"Wizardlib"},{"location":"python/wizardlib/#wizardlib","text":"Here, you'll find the documentation for CodeWizardHQ's Wizardlib Python library. We use this library in the following courses: Elementary Middle School Python Game Development Introduction to Programming with Python","title":"Wizardlib"},{"location":"python/wizardlib/#add_audio","text":"Adds an audio file. Function signature: add_audio ( filename ) Parameters: filename ( str ) : The filename. Returns: The audio element. Example usage: audio_element = add_audio ( \"never-gonna-give-you-up.mp3\" )","title":"add_audio()"},{"location":"python/wizardlib/#add_background","text":"Adds a background image. Function signature: add_background ( filename ) Parameters: filename ( str ): The filename. Example usage: add_background ( \"flying-cats.png\" ) Example output:","title":"add_background()"},{"location":"python/wizardlib/#add_background_audio","text":"Adds background audio which plays when you click the Start button. Function signature: add_background_audio ( filename ) Parameters: filename ( str ): The filename. Example usage: add_background_audio ( \"never-gonna-give-you-up.mp3\" )","title":"add_background_audio()"},{"location":"python/wizardlib/#add_button","text":"Adds a button. Function signature: add_button ( text ) Parameters: text ( str ): The text on the button. Returns: The button element. Example usage: button = add_button ( \"Click Me\" ) Example output:","title":"add_button()"},{"location":"python/wizardlib/#add_image","text":"Adds an image to the page. Function signature: add_image ( filename , size ) Parameters: filename ( str ): The filename. size ( int ): The size, in pixels (optional). Returns: The image element. Example usage: taco_image = add_image ( \"taco.png\" ) Example output:","title":"add_image()"},{"location":"python/wizardlib/#add_text","text":"Adds text to the page. Function signature: add_text ( text , size ) Parameters: text ( str ): The text to add to the page. size ( int ): The size, in pixels (optional, defaults to 18). Returns: The text element. Example usage: wizardlib_text = add_text ( \"Wizardlib is cool!\" ) Example output:","title":"add_text()"},{"location":"python/wizardlib/#add_text_input","text":"Adds a text input to the page. Function signature: add_text_input ( placeholder ) Parameters: placeholder ( str ): The text to display in the input box. Returns: The text input element. Example usage: text_input = add_text_input ( \"Enter your password:\" ) Example output:","title":"add_text_input()"},{"location":"python/wizardlib/#animate_down","text":"Animates the element down by the given distance . Can optionally change the amount of time the animation takes and whether the element animates down and up repeatedly. Function signature: animate_down ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate down and up (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_down ( taco_image , 100 ) Example output:","title":"animate_down()"},{"location":"python/wizardlib/#animate_left","text":"Animates the element left by the given distance . Can optionally change the amount of time the animation takes and whether the element animates left and right repeatedly. Function signature: animate_left ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate left and right (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_left ( taco_image , 100 ) Example output:","title":"animate_left()"},{"location":"python/wizardlib/#animate_right","text":"Animates the element right by the given distance . Can optionally change the amount of time the animation takes and whether the element animates right and left repeatedly. Function signature: animate_right ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate right and left (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_right ( taco_image , 100 ) Example output:","title":"animate_right()"},{"location":"python/wizardlib/#animate_up","text":"Animates the element up by the given distance . Can optionally change the amount of time the animation takes and whether the element animates up and down repeatedly. Function signature: animate_up ( element , distance , time , loop ) Parameters: element ( element ): An element to animate. distance ( int ): The distance the element should travel (in pixels). time ( int ): The amount of seconds the animation should take (optional, defaults to 8). loop ( bool ): Whether to repeatedly animate up and down (optional, defaults to False ). Example usage: taco_image = add_image ( \"taco.jpg\" ) animate_up ( taco_image , 100 ) Example output:","title":"animate_up()"},{"location":"python/wizardlib/#check_collision","text":"If element1 and element2 collide, function_to_run is called. Function signature: check_collision ( element1 , element2 , function_to_run ) Parameters: element1 ( element ): An element to check for collisions with. element2 ( element ): An element to check for collisions with. function_to_run ( function ): The function to run if element1 hits element2 . Example usage: def cat_caught_taco (): clear () text = add_text ( \"The kitty caught the taco!\" ) position_element ( text , \"center\" , \"center\" ) def move ( key ): if key == \"w\" : move_up ( cat_image , 10 ) elif key == \"a\" : move_left ( cat_image , 10 ) elif key == \"s\" : move_down ( cat_image , 10 ) elif key == \"d\" : move_right ( cat_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) cat_image = add_image ( \"flying-cats.jpg\" , 100 ) position_element ( cat_image , 700 , 300 ) keydown ( move ) check_collision ( taco_image , cat_image , cat_caught_taco ) Example output:","title":"check_collision()"},{"location":"python/wizardlib/#clear","text":"Clear the page of all elements. Function signature: clear () Example usage: def clear_page (): clear () after_clear_text = add_text ( \"Page was cleared\" , 32 ) position_element ( after_clear_text , \"center\" , \"center\" ) before_clear_text = add_text ( \"This is on the page before clearing\" , 32 ) position_element ( before_clear_text , \"center\" , \"center\" ) clear_page_button = add_button ( \"Clear Page\" ) position_element ( clear_page_button , \"center\" , 400 ) click ( clear_page_button , clear_page ) Example output:","title":"clear()"},{"location":"python/wizardlib/#click","text":"Call function_to_run when element is clicked. Function signature: click ( element , function_to_run ) Parameters: element ( element ): The element to click. function_to_run ( function ): The function to run if element is clicked. Example usage: def show_text (): text = add_text ( \"Button was clicked!\" , 32 ) position_element ( text , \"center\" , \"center\" ) button = add_button ( \"Click Me\" ) position_element ( button , \"center\" , 400 ) click ( button , show_text ) Example output:","title":"click()"},{"location":"python/wizardlib/#fade_in","text":"Fades the element from invisible to visible. Function signature: fade_in ( element ) Parameters: element ( element ): The element to fade in. Example usage: def fade_text_in (): fade_in ( hidden_text ) hidden_text = add_text ( \"Hidden Text\" , 32 ) position_element ( hidden_text , \"center\" , 400 ) fade_out ( hidden_text ) fade_in_button = add_button ( \"Fade In\" ) position_element ( fade_in_button , \"center\" , \"center\" ) click ( fade_in_button , fade_text_in ) Example output:","title":"fade_in()"},{"location":"python/wizardlib/#fade_out","text":"Fades the element from visible to invisible. Function signature: fade_out ( element ) Parameters: element ( element ): The element to fade out. Example usage: def fade_text_out (): fade_out ( text_to_hide ) text_to_hide = add_text ( \"Text To Hide\" , 32 ) position_element ( text_to_hide , \"center\" , 400 ) fade_out_button = add_button ( \"Fade Out\" ) position_element ( fade_out_button , \"center\" , \"center\" ) click ( fade_out_button , fade_text_out ) Example output:","title":"fade_out()"},{"location":"python/wizardlib/#get_input_value","text":"Gets the value of the input element . Function signature: get_input_value ( element ) Parameters: element ( element ): The element to get the value from. Example usage: def login (): password = get_input_value ( password_input ) clear () if password == \"secretpassword\" : logged_in_text = add_text ( \"You've logged in!\" , 32 ) position_element ( logged_in_text , \"center\" , 400 ) password_input = add_text_input ( \"Enter your password\" ) position_element ( password_input , \"center\" , 400 ) login_button = add_button ( \"Login\" ) position_element ( login_button , \"center\" , \"center\" ) click ( login_button , login ) Example output:","title":"get_input_value()"},{"location":"python/wizardlib/#keydown","text":"Runs function_to_run when a key is pressed. The key that is pressed will be passed as the first argument to function_to_run and will always be lowercase. Function signature: keydown ( function_to_run ) Parameters: function_to_run ( function ): The function to run when a key is pressed. Example usage: def key_logger ( pressed_key ): update_text ( last_key_pressed_text , f \"Last key pressed: { pressed_key } \" ) last_key_pressed_text = add_text ( \"Last key pressed: \" , 32 ) position_element ( last_key_pressed_text , \"center\" , 400 ) keydown ( key_logger ) Example output:","title":"keydown()"},{"location":"python/wizardlib/#move_down","text":"Moves the element down by the given distance . Function signature: move_down ( element , distance ) Parameters: element ( element ): The element to move down. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output:","title":"move_down()"},{"location":"python/wizardlib/#move_left","text":"Moves the element left by the given distance . Function signature: move_left ( element , distance ) Parameters: element ( element ): The element to move left. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output:","title":"move_left()"},{"location":"python/wizardlib/#move_right","text":"Moves the element right by the given distance . Function signature: move_right ( element , distance ) Parameters: element ( element ): The element to move right. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output:","title":"move_right()"},{"location":"python/wizardlib/#move_up","text":"Moves the element up by the given distance . Function signature: move_up ( element , distance ) Parameters: element ( element ): The element to move up. distance ( int ): The distance the element should travel (in pixels). Example usage: def move_taco ( pressed_key ): if pressed_key == \"w\" : move_up ( taco_image , 10 ) elif pressed_key == \"a\" : move_left ( taco_image , 10 ) elif pressed_key == \"s\" : move_down ( taco_image , 10 ) elif pressed_key == \"d\" : move_right ( taco_image , 10 ) taco_image = add_image ( \"taco.jpg\" , 100 ) position_element ( taco_image , \"center\" , \"center\" ) keydown ( move_taco ) Example output:","title":"move_up()"},{"location":"python/wizardlib/#play_audio","text":"Plays the audio that element represents. Function signature: play_audio ( element ) Parameters: element ( element ): The audio element to play. Example usage: laugh_audio = add_audio ( \"laugh.mp3\" ) play_audio ( laugh_audio )","title":"play_audio()"},{"location":"python/wizardlib/#position_element","text":"Position the element at the given x and y position. The x and y arguments can be any int , or one of the position helpers: Position Helper1 Helper2 Helper3 x \"left\" \"center\" \"right\" y \"top\" \"center\" \"bottom\" Function signature: position_element ( element , x , y ) Parameters: element ( element ): The element to position. x ( int | str ): The desired x-position of the element . y ( int | str ): The desired y-position of the element . Example usage: taco_image = add_image ( \"taco.jpg\" ) position_element ( taco_image , \"center\" , 400 )","title":"position_element()"},{"location":"python/wizardlib/#set_background_color","text":"Sets the background color of the page to color . Function signature: set_background_color ( color ) Parameters: color ( str ): The desired background color. Example usage: set_background_color ( \"darksalmon\" ) Example output:","title":"set_background_color()"},{"location":"python/wizardlib/#set_element_width","text":"Sets the element to the given width . Function signature: set_element_width ( element , width ) Parameters: element ( element ): The element to adjust. width ( int ): The desired width of the element . Example usage: def shrink_taco (): set_element_width ( taco_image , 100 ) shrink_taco_button = add_button ( \"Shrink Taco\" ) position_element ( shrink_taco_button , \"center\" , \"center\" ) taco_image = add_image ( \"taco.jpg\" , 300 ) position_element ( taco_image , \"center\" , 200 ) click ( shrink_taco_button , shrink_taco ) Example output:","title":"set_element_width()"},{"location":"python/wizardlib/#set_font_size","text":"Sets the font size of the element to the given font_size . Function signature: set_font_size ( element , font_size ) Parameters: element ( element ): The element to adjust. font_size ( int ): The desired font_size of the element . Example usage: def shrink_text (): set_font_size ( text_element , 25 ) shrink_text_button = add_button ( \"Shrink Font\" ) position_element ( shrink_text_button , \"center\" , \"center\" ) text_element = add_text ( \"Shrink this text!\" , 100 ) position_element ( text_element , \"center\" , 300 ) click ( shrink_text_button , shrink_text ) Example output:","title":"set_font_size()"},{"location":"python/wizardlib/#set_text_color","text":"Sets the color of the text_element . Function signature: set_text_color ( text_element , color ) Parameters: text_element ( element ): The text element to adjust. color ( str ): The desired color of the text_element . Example usage: red_text = add_text ( \"This text is red\" , 32 ) set_text_color ( red_text , \"red\" ) Example output:","title":"set_text_color()"},{"location":"python/wizardlib/#set_text_decoration","text":"Sets the text decoration of the given text_element . Function signature: set_text_decoration ( text_element , decoration_string ) Parameters: text_element ( element ): The text element to adjust. decoration_string ( str ): The decoration string for the CSS property. Example usage: text_element = add_text ( \"Never Gonna Give You Up\" , 42 ) set_text_decoration ( text_element , \"underline dotted blue\" ) Example output: Read about different options for the decoration_string here","title":"set_text_decoration()"},{"location":"python/wizardlib/#set_timeout","text":"Runs function_to_run after time seconds. Function signature: set_timeout ( function_to_run , time ) Parameters: function_to_run ( function ): The function to run. time ( int ): The time (in seconds) to wait before running the function_to_run . Example usage: def show_boo_text (): boo_text = add_text ( \"BOO!!!\" , 100 ) position_element ( boo_text , \"center\" , 300 ) set_timeout ( show_boo_text , 3 ) Example output:","title":"set_timeout()"},{"location":"python/wizardlib/#update_text","text":"Changes the text in text_element to the new_text . Function signature: update_text ( text_element , new_text ) Parameters: text_element ( element ): The element to adjust. new_text ( str ): The new text for the text_element . Example usage: def update_text_element (): update_text ( text_element , \"Updated text\" ) text_element = add_text ( \"Original text\" , 32 ) position_element ( text_element , \"center\" , 400 ) update_text_button = add_button ( \"Update Text\" ) position_element ( update_text_button , \"center\" , \"center\" ) click ( update_text_button , update_text_element ) Example output:","title":"update_text()"},{"location":"python/wizardlib/#remove_element","text":"Removes the element from the page. Function signature: remove_element ( element ) Parameters: element ( element ): The element to remove. Example usage: def remove_taco (): remove_element ( taco_image ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) remove_taco_button = add_button ( \"Remove Taco\" ) position_element ( remove_taco_button , \"center\" , \"center\" ) click ( remove_taco_button , remove_taco ) Example output:","title":"remove_element()"},{"location":"python/wizardlib/#rotate_element","text":"Rotates the element by the given number of degrees . Function signature: rotate_element ( element , degrees ) Parameters: element ( element ): The element to rotate. degrees ( int ): The number of degrees to rotate the element . Example usage: def rotate_taco (): rotate_element ( taco_image , 180 ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) rotate_taco_button = add_button ( \"Rotate Taco\" ) position_element ( rotate_taco_button , \"center\" , \"center\" ) click ( rotate_taco_button , rotate_taco ) Example output:","title":"rotate_element()"},{"location":"python/wizardlib/#vanish","text":"Removes the element from the page over a 1 second interval. Function signature: vanish ( element ) Parameters: element ( element ): The element to remove. Example usage: def vanish_taco (): vanish ( taco_image ) taco_image = add_image ( \"taco.jpg\" , 200 ) position_element ( taco_image , \"center\" , 300 ) vanish_taco_button = add_button ( \"Vanish Taco\" ) position_element ( vanish_taco_button , \"center\" , \"center\" ) click ( vanish_taco_button , vanish_taco ) Example output:","title":"vanish()"}]}